!function(){"use strict";const t={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"};class e{constructor(t,e,s,o,r){this._name=t.name,this._link=t.link,this._id=t._id,this._isLiked=t.isLiked,this._cardSelector=e,this._handleImageClick=s,this._handleDeleteButtonClick=o,this._handleLikeButtonClick=r}_setCardImageListeners(){this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this._cardImage)}))}_checkLiked(){this._isLiked&&this._likeButton.classList.add("card__like-button_active")}_toggleLike(){this._isLiked=!this._isLiked,this._likeButton.classList.toggle("card__like-button_active")}_setLikeButtonListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeButtonClick(this._id,this._isLiked),this._toggleLike()}))}_setTrashButtonListeners(){this._trashButton.addEventListener("click",(()=>{this._handleDeleteButtonClick(this._id)}))}createCard(){return this._cardElement=this._cardSelector.cloneNode(!0),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardDesc=this._cardElement.querySelector(".card__description"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._trashButton=this._cardElement.querySelector(".card__trash-button"),this._cardDesc.textContent=this._name,this._cardImage.src=this._link,this._cardImage.setAttribute("alt",this._name),this._cardElement.setAttribute("id",this._id),this._setCardImageListeners(),this._setLikeButtonListeners(),this._setTrashButtonListeners(),this._checkLiked(),this._cardElement}}class s{constructor(t,e){this._options=t,this._formElement=e,this._inputElements=Array.from(this._formElement.querySelectorAll(this._options.inputSelector)),this._submitButton=this._formElement.querySelector(this._options.submitButtonSelector),this._inputErrorClass=this._options.inputErrorClass,this._errorClass=this._options.errorClass,this._inactiveButtonClass=this._options.inactiveButtonClass}_showInputError(t){const e=this._formElement.querySelector(`#${t.id}-error`);t.classList.add(this._inputErrorClass),e.textContent=t.validationMessage,e.classList.add(this._errorClass)}_hideInputError(t){const e=this._formElement.querySelector(`#${t.id}-error`);t.classList.remove(this._inputErrorClass),e.textContent="",e.classList.remove(this._errorClass)}_checkInputValidity(t){t.validity.valid?this._hideInputError(t):this._showInputError(t)}_hasInvalidInput(){return this._inputElements.some((t=>!t.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this.disableFormButton():this.enableFormButton()}_setEventListeners(){this._toggleButtonState(),this._inputElements.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState()}))}))}disableFormButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}enableFormButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}enableValidation(){this._formElement.addEventListener("submit",(t=>{t.preventDefault()})),this._setEventListeners()}resetFormValidation(){this._inputElements.forEach((t=>{this._checkInputValidity(t)}))}}class o{constructor(t){let{popupSelector:e}=t;this._popupElement=document.querySelector(e),this._closeButton=this._popupElement.querySelector(".modal__close-button"),this._handleEscClose=t=>{"Escape"===t.key&&this.close()}}setEventListeners(){this._closeButton.addEventListener("click",(()=>this.close())),this._popupElement.addEventListener("click",(t=>{t.target===this._popupElement&&this.close()}))}open(){document.addEventListener("keydown",this._handleEscClose),this._popupElement.classList.add("modal_opened")}close(){document.removeEventListener("keydown",this._handleEscClose),this._popupElement.classList.remove("modal_opened")}}class r extends o{constructor(t,e){super({popupSelector:t}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._popupFormInputs=this._popupElement.querySelectorAll(".modal__input"),this._popupButton=this._popupElement.querySelector(".modal__button"),this._handleFormSubmit=e,this._handleSubmitListener=t=>{t.preventDefault(),this._popupButton.textContent="Saving...";const e=this._getInputValues();this._handleFormSubmit(e).then((()=>{this.close(),setTimeout((()=>{this._popupButton.textContent="Save"}),500)})).catch((t=>{console.error(t)}))},this.setEventListeners()}_getInputValues(){const t={};return this._popupFormInputs.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){this._popupForm.addEventListener("submit",this._handleSubmitListener),super.setEventListeners()}}const i=document.querySelector("#edit-modal"),n=new class extends o{constructor(t){super({popupSelector:t}),this._popupImage=this._popupElement.querySelector(".modal__image"),this._popupDescription=this._popupElement.querySelector(".modal__image-footing")}open(t){let{name:e,link:s}=t;this._popupImage.src=s,this._popupImage.alt=`This is a picture of ${e}`,this._popupDescription.textContent=e,super.open()}}("#image-modal"),a=document.forms["avatar-form"],l=document.forms["profile-form"],c=i.querySelector("[name = 'name']"),h=i.querySelector("[name = 'about']"),u=document.forms["add-card-form"],d=new class{constructor(t){let{nameSelector:e,aboutSelector:s,avatarSelector:o}=t;this._nameElement=document.querySelector(e),this._aboutElement=document.querySelector(s),this._avatarElement=document.querySelector(o)}getUserInfo(){return{name:this._nameElement.textContent,about:this._aboutElement.textContent,avatar:this._avatarElement.src}}setUserInfo(t){let{name:e,about:s}=t;this._nameElement.textContent=e,this._aboutElement.textContent=s}setUserAvatar(t){this._avatarElement.src=t}}({nameSelector:".profile__name",aboutSelector:".profile__description",avatarSelector:".profile__image"}),_=new r("#avatar-modal",(function(t){const e=t.url;return L.patchAvatar(e).then((()=>{d.setUserAvatar(e)})).catch((t=>{console.error(t)}))})),m=new r("#edit-modal",(function(t){return L.patchUserInfo(t).then(d.setUserInfo(t)).catch((t=>{console.error(t)}))})),p=new r("#add-modal",(function(t){const e={name:t.title,link:t.url};return L.postNewCard(e).then((t=>{B.addItem(y(t))})).catch((t=>{console.error(t)})).finally((()=>{p.close(),k.disableFormButton(),u.reset()}))})),E=new r("#delete-modal",(function(){return L.deleteCard(b.id).then((()=>{let t=document.getElementById(b.id);t.remove(),t=null})).catch((t=>{console.error(t)}))})),v=new s(t,a),f=new s(t,l),k=new s(t,u),b={id:""},L=new class{constructor(t){this._options=t}_getUserAvatar(){return fetch(this._options.baseUrl+"/users/me/avatar",{headers:{authorization:this._options.headers.authorization}}).then((t=>t.ok?t.json():Promise.reject(`Error: ${t.status}`)))}_getUserData(){return fetch(`${this._options.baseUrl}/users/me`,{headers:{authorization:this._options.headers.authorization}}).then((t=>t.ok?t.json():Promise.reject(`Error: ${t.status}`)))}_getInitialCards(){return fetch(`${this._options.baseUrl}/cards`,{headers:{authorization:this._options.headers.authorization}}).then((t=>t.ok?t.json():Promise.reject(`Error: ${t.status}`)))}returnData(){return Promise.all([this._getUserData(),this._getInitialCards()])}patchUserInfo(t){let{name:e,about:s}=t;return fetch(`${this._options.baseUrl}/users/me`,{method:"PATCH",headers:{authorization:this._options.headers.authorization,"Content-Type":"application/json"},body:JSON.stringify({name:e,about:s})}).then((t=>t.ok?t.json():Promise.reject(`Error: ${t.status}`)))}patchAvatar(t){return fetch(`${this._options.baseUrl}/users/me/avatar`,{method:"PATCH",headers:{authorization:this._options.headers.authorization,"Content-Type":"application/json"},body:JSON.stringify({avatar:t})}).then((t=>t.ok?t.json():Promise.reject(`Error: ${t.status}`)))}postNewCard(t){let{name:e,link:s}=t;return fetch(`${this._options.baseUrl}/cards`,{method:"POST",headers:{authorization:this._options.headers.authorization,"Content-Type":"application/json"},body:JSON.stringify({name:e,link:s})}).then((t=>t.ok?t.json():Promise.reject(`Error: ${t.status}`)))}deleteCard(t){return fetch(`${this._options.baseUrl}/cards/${t}`,{method:"DELETE",headers:{authorization:this._options.headers.authorization,"Content-Type":"application/json"}}).then((t=>t.ok?t.json():Promise.reject(`Error: ${t.status}`)))}addLike(t){return fetch(`${this._options.baseUrl}/cards/${t}/likes`,{method:"PUT",headers:{authorization:this._options.headers.authorization,"Content-Type":"application/json"}}).then((t=>t.ok?t.json():Promise.reject(`Error: ${t.status}`)))}removeLike(t){return fetch(`${this._options.baseUrl}/cards/${t}/likes`,{method:"DELETE",headers:{authorization:this._options.headers.authorization,"Content-Type":"application/json"}}).then((t=>t.ok?t.json():Promise.reject(`Error: ${t.status}`)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"3f4287cc-0267-4f84-80ed-88627a1cce84","Content-Type":"application/json"}}),S=L.returnData().then((t=>{let[e,s]=t;d.setUserAvatar(e.avatar),d.setUserInfo(e),s.forEach((t=>{g(t)}))})).catch((t=>{console.error(t)})),C=document.querySelector("#card__template").content.firstElementChild,y=t=>new e(t,C,U,$,z).createCard(),g=t=>{const e=y(t);B.addItem(e)},B=new class{constructor(t,e){let{items:s,renderer:o}=t;this._items=s,this._renderer=o,this._container=document.querySelector(e)}renderItems(){this._items.forEach((t=>{this._renderer(t)}))}addItem(t){this._container.prepend(t)}}({items:S,renderer:g},".gallery__cards"),I=document.querySelector(".profile__image-button"),q=document.querySelector(".profile__edit-button"),j=document.querySelector(".profile__add-button");function U(t){const e={name:t.alt,link:t.src};n.open(e)}function $(t){b.id=t,E.open()}function z(t,e){b.id=t,e?L.removeLike(b.id).catch((t=>{console.error(t)})):L.addLike(b.id).catch((t=>{console.error(t)}))}n.setEventListeners(),f.enableValidation(),k.enableValidation(),v.enableValidation(),I.addEventListener("click",(function(){_.open()})),q.addEventListener("click",(function(){const t=d.getUserInfo();c.value=t.name,h.value=t.about,f.enableFormButton(),m.open()})),j.addEventListener("click",(function(){p.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YzlGLElBQUk0QyxPQUFPQyxJQUNuQ0MsUUFBUUMsTUFBTUYsRUFBSSxHQUd4QixDQUlBTSxFQUFXdkIsb0JBQ1hzRSxFQUFxQm5GLG1CQUNyQjJFLEVBQXFCM0UsbUJBQ3JCa0YsRUFBb0JsRixtQkFHcEI0SCxFQUFhNUssaUJBQWlCLFNBN0Y5QixXQUNFMkcsRUFBZ0I1QyxNQUNsQixJQTRGQThHLEVBQVc3SyxpQkFBaUIsU0E5RTVCLFdBQ0UsTUFBTWdMLEVBQWNsRixFQUFLTyxjQUN6QlYsRUFBZ0JULE1BQVE4RixFQUFZNUwsS0FDcEN3RyxFQUFnQlYsTUFBUThGLEVBQVkxRSxNQUNwQzZCLEVBQXFCdkYsbUJBQ3JCcUUsRUFBaUJsRCxNQUNuQixJQXlFQStHLEVBQWM5SyxpQkFBaUIsU0EvRC9CLFdBQ0VtSCxFQUFpQnBELE1BQ25CLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9wYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1VzZXIuanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL0FwaS5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBWQUxJREFUT1IgT1BUSU9OU1xyXG5leHBvcnQgY29uc3Qgb3B0aW9ucyA9IHtcclxuICBmb3JtU2VsZWN0b3I6IFwiLm1vZGFsX19mb3JtXCIsXHJcbiAgaW5wdXRTZWxlY3RvcjogXCIubW9kYWxfX2lucHV0XCIsXHJcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLm1vZGFsX19idXR0b25cIixcclxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcIm1vZGFsX19idXR0b25fZGlzYWJsZWRcIixcclxuICBpbnB1dEVycm9yQ2xhc3M6IFwibW9kYWxfX2lucHV0X3R5cGVfZXJyb3JcIixcclxuICBlcnJvckNsYXNzOiBcIm1vZGFsX19lcnJvcl92aXNpYmxlXCIsXHJcbn07XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmQge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgZGF0YSxcclxuICAgIGNhcmRTZWxlY3RvcixcclxuICAgIGhhbmRsZUltYWdlQ2xpY2ssXHJcbiAgICBoYW5kbGVEZWxldGVCdXR0b25DbGljayxcclxuICAgIGhhbmRsZUxpa2VCdXR0b25DbGlja1xyXG4gICkge1xyXG4gICAgdGhpcy5fbmFtZSA9IGRhdGEubmFtZTtcclxuICAgIHRoaXMuX2xpbmsgPSBkYXRhLmxpbms7XHJcbiAgICB0aGlzLl9pZCA9IGRhdGEuX2lkO1xyXG4gICAgdGhpcy5faXNMaWtlZCA9IGRhdGEuaXNMaWtlZDtcclxuICAgIHRoaXMuX2NhcmRTZWxlY3RvciA9IGNhcmRTZWxlY3RvcjtcclxuICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2sgPSBoYW5kbGVJbWFnZUNsaWNrO1xyXG4gICAgdGhpcy5faGFuZGxlRGVsZXRlQnV0dG9uQ2xpY2sgPSBoYW5kbGVEZWxldGVCdXR0b25DbGljaztcclxuICAgIHRoaXMuX2hhbmRsZUxpa2VCdXR0b25DbGljayA9IGhhbmRsZUxpa2VCdXR0b25DbGljaztcclxuICB9XHJcbiAgX3NldENhcmRJbWFnZUxpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX2NhcmRJbWFnZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLl9oYW5kbGVJbWFnZUNsaWNrKHRoaXMuX2NhcmRJbWFnZSk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgX2NoZWNrTGlrZWQoKSB7XHJcbiAgICBpZiAodGhpcy5faXNMaWtlZCkge1xyXG4gICAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJjYXJkX19saWtlLWJ1dHRvbl9hY3RpdmVcIik7XHJcbiAgICB9XHJcbiAgfVxyXG4gIF90b2dnbGVMaWtlKCkge1xyXG4gICAgdGhpcy5faXNMaWtlZCA9ICF0aGlzLl9pc0xpa2VkO1xyXG4gICAgdGhpcy5fbGlrZUJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKFwiY2FyZF9fbGlrZS1idXR0b25fYWN0aXZlXCIpO1xyXG4gIH1cclxuICBfc2V0TGlrZUJ1dHRvbkxpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX2xpa2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlTGlrZUJ1dHRvbkNsaWNrKHRoaXMuX2lkLCB0aGlzLl9pc0xpa2VkKTtcclxuICAgICAgdGhpcy5fdG9nZ2xlTGlrZSgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIF9zZXRUcmFzaEJ1dHRvbkxpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX3RyYXNoQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZURlbGV0ZUJ1dHRvbkNsaWNrKHRoaXMuX2lkKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlQ2FyZCgpIHtcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50ID0gdGhpcy5fY2FyZFNlbGVjdG9yLmNsb25lTm9kZSh0cnVlKTtcclxuICAgIHRoaXMuX2NhcmRJbWFnZSA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIik7XHJcbiAgICB0aGlzLl9jYXJkRGVzYyA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fZGVzY3JpcHRpb25cIik7XHJcbiAgICB0aGlzLl9saWtlQnV0dG9uID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlLWJ1dHRvblwiKTtcclxuICAgIHRoaXMuX3RyYXNoQnV0dG9uID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX190cmFzaC1idXR0b25cIik7XHJcbiAgICB0aGlzLl9jYXJkRGVzYy50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XHJcbiAgICB0aGlzLl9jYXJkSW1hZ2Uuc3JjID0gdGhpcy5fbGluaztcclxuICAgIHRoaXMuX2NhcmRJbWFnZS5zZXRBdHRyaWJ1dGUoXCJhbHRcIiwgdGhpcy5fbmFtZSk7XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCB0aGlzLl9pZCk7XHJcbiAgICB0aGlzLl9zZXRDYXJkSW1hZ2VMaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMuX3NldExpa2VCdXR0b25MaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMuX3NldFRyYXNoQnV0dG9uTGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLl9jaGVja0xpa2VkKCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2NhcmRFbGVtZW50O1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcclxuICBjb25zdHJ1Y3RvcihvcHRpb25zLCBmb3JtRWxlbWVudCkge1xyXG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICB0aGlzLl9mb3JtRWxlbWVudCA9IGZvcm1FbGVtZW50O1xyXG4gICAgdGhpcy5faW5wdXRFbGVtZW50cyA9IEFycmF5LmZyb20oXHJcbiAgICAgIHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fb3B0aW9ucy5pbnB1dFNlbGVjdG9yKVxyXG4gICAgKTtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIHRoaXMuX29wdGlvbnMuc3VibWl0QnV0dG9uU2VsZWN0b3JcclxuICAgICk7XHJcbiAgICB0aGlzLl9pbnB1dEVycm9yQ2xhc3MgPSB0aGlzLl9vcHRpb25zLmlucHV0RXJyb3JDbGFzcztcclxuICAgIHRoaXMuX2Vycm9yQ2xhc3MgPSB0aGlzLl9vcHRpb25zLmVycm9yQ2xhc3M7XHJcbiAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gdGhpcy5fb3B0aW9ucy5pbmFjdGl2ZUJ1dHRvbkNsYXNzO1xyXG4gIH1cclxuICBfc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50KSB7XHJcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBgIyR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmBcclxuICAgICk7XHJcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlO1xyXG4gICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgfVxyXG4gIF9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcclxuICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIGAjJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYFxyXG4gICAgKTtcclxuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgfVxyXG4gIF9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbGVtZW50KSB7XHJcbiAgICBpZiAoIWlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZCkge1xyXG4gICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcclxuICAgIH1cclxuICB9XHJcbiAgX2hhc0ludmFsaWRJbnB1dCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9pbnB1dEVsZW1lbnRzLnNvbWUoXHJcbiAgICAgIChpbnB1dEVsZW1lbnQpID0+ICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWRcclxuICAgICk7XHJcbiAgfVxyXG4gIF90b2dnbGVCdXR0b25TdGF0ZSgpIHtcclxuICAgIGlmICh0aGlzLl9oYXNJbnZhbGlkSW5wdXQoKSkge1xyXG4gICAgICB0aGlzLmRpc2FibGVGb3JtQnV0dG9uKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmVuYWJsZUZvcm1CdXR0b24oKTtcclxuICAgIH1cclxuICB9XHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgIHRoaXMuX2lucHV0RWxlbWVudHMuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIGRpc2FibGVGb3JtQnV0dG9uKCkge1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xyXG4gIH1cclxuICBlbmFibGVGb3JtQnV0dG9uKCkge1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcclxuICB9XHJcbiAgZW5hYmxlVmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMuX2Zvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbiAgcmVzZXRGb3JtVmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMuX2lucHV0RWxlbWVudHMuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcih7IHBvcHVwU2VsZWN0b3IgfSkge1xyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2Nsb3NlQnV0dG9uID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLm1vZGFsX19jbG9zZS1idXR0b25cIlxyXG4gICAgKTtcclxuICAgIHRoaXMuX2hhbmRsZUVzY0Nsb3NlID0gKGV2dCkgPT4ge1xyXG4gICAgICBpZiAoZXZ0LmtleSA9PT0gXCJFc2NhcGVcIikge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9jbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gdGhpcy5jbG9zZSgpKTtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2dCkgPT4ge1xyXG4gICAgICBpZiAoZXZ0LnRhcmdldCA9PT0gdGhpcy5fcG9wdXBFbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgb3BlbigpIHtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gIH1cclxuICBjbG9zZSgpIHtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3RvciwgaGFuZGxlRm9ybVN1Ym1pdCkge1xyXG4gICAgc3VwZXIoeyBwb3B1cFNlbGVjdG9yIH0pO1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2Zvcm1cIik7XHJcbiAgICB0aGlzLl9wb3B1cEZvcm1JbnB1dHMgPVxyXG4gICAgICB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbF9faW5wdXRcIik7XHJcbiAgICB0aGlzLl9wb3B1cEJ1dHRvbiA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19idXR0b25cIik7XHJcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcclxuICAgIHRoaXMuX2hhbmRsZVN1Ym1pdExpc3RlbmVyID0gKGV2dCkgPT4ge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy5fcG9wdXBCdXR0b24udGV4dENvbnRlbnQgPSBcIlNhdmluZy4uLlwiO1xyXG4gICAgICBjb25zdCBpbnB1dFZhbHVlcyA9IHRoaXMuX2dldElucHV0VmFsdWVzKCk7XHJcblxyXG4gICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KGlucHV0VmFsdWVzKVxyXG4gICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9wb3B1cEJ1dHRvbi50ZXh0Q29udGVudCA9IFwiU2F2ZVwiO1xyXG4gICAgICAgICAgfSwgNTAwKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxuICBfZ2V0SW5wdXRWYWx1ZXMoKSB7XHJcbiAgICBjb25zdCBpbnB1dFZhbHVlcyA9IHt9O1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtSW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIGlucHV0VmFsdWVzW2lucHV0Lm5hbWVdID0gaW5wdXQudmFsdWU7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBpbnB1dFZhbHVlcztcclxuICB9XHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9wb3B1cEZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCB0aGlzLl9oYW5kbGVTdWJtaXRMaXN0ZW5lcik7XHJcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxufVxyXG4iLCIvLyBJTVBPUlRTXHJcbmltcG9ydCB7IG9wdGlvbnMgfSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzLmpzXCI7XHJcbmltcG9ydCBDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcclxuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xyXG5pbXBvcnQgU2VjdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9TZWN0aW9uLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoRm9ybSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzXCI7XHJcbmltcG9ydCBVc2VyIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXIuanNcIjtcclxuaW1wb3J0IEFwaSBmcm9tIFwiLi4vY29tcG9uZW50cy9BcGkuanNcIjtcclxuaW1wb3J0IFwiLi4vcGFnZXMvaW5kZXguY3NzXCI7XHJcblxyXG4vLyBNT0RBTFNcclxuY29uc3QgZWRpdFByb2ZpbGVNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZWRpdC1tb2RhbFwiKTtcclxuY29uc3QgaW1hZ2VNb2RhbCA9IG5ldyBQb3B1cFdpdGhJbWFnZShcIiNpbWFnZS1tb2RhbFwiKTtcclxuXHJcbi8vIEZPUk1TXHJcbmNvbnN0IGF2YXRhckZvcm0gPSBkb2N1bWVudC5mb3Jtc1tcImF2YXRhci1mb3JtXCJdO1xyXG5jb25zdCBwcm9maWxlRm9ybSA9IGRvY3VtZW50LmZvcm1zW1wicHJvZmlsZS1mb3JtXCJdO1xyXG5jb25zdCBwcm9maWxlRm9ybU5hbWUgPSBlZGl0UHJvZmlsZU1vZGFsLnF1ZXJ5U2VsZWN0b3IoXCJbbmFtZSA9ICduYW1lJ11cIik7XHJcbmNvbnN0IHByb2ZpbGVGb3JtRGVzYyA9IGVkaXRQcm9maWxlTW9kYWwucXVlcnlTZWxlY3RvcihcIltuYW1lID0gJ2Fib3V0J11cIik7XHJcbmNvbnN0IGFkZENhcmRGb3JtID0gZG9jdW1lbnQuZm9ybXNbXCJhZGQtY2FyZC1mb3JtXCJdO1xyXG5jb25zdCB1c2VyID0gbmV3IFVzZXIoe1xyXG4gIG5hbWVTZWxlY3RvcjogXCIucHJvZmlsZV9fbmFtZVwiLFxyXG4gIGFib3V0U2VsZWN0b3I6IFwiLnByb2ZpbGVfX2Rlc2NyaXB0aW9uXCIsXHJcbiAgYXZhdGFyU2VsZWN0b3I6IFwiLnByb2ZpbGVfX2ltYWdlXCIsXHJcbn0pO1xyXG5jb25zdCBwb3B1cEF2YXRhckZvcm0gPSBuZXcgUG9wdXBXaXRoRm9ybShcclxuICBcIiNhdmF0YXItbW9kYWxcIixcclxuICBhdmF0YXJGb3JtU3VibWl0SGFuZGxlclxyXG4pO1xyXG5jb25zdCBwb3B1cFByb2ZpbGVGb3JtID0gbmV3IFBvcHVwV2l0aEZvcm0oXHJcbiAgXCIjZWRpdC1tb2RhbFwiLFxyXG4gIHByb2ZpbGVGb3JtU3VibWl0SGFuZGxlclxyXG4pO1xyXG5jb25zdCBwb3B1cEFkZENhcmRGb3JtID0gbmV3IFBvcHVwV2l0aEZvcm0oXHJcbiAgXCIjYWRkLW1vZGFsXCIsXHJcbiAgYWRkQ2FyZEZvcm1TdWJtaXRIYW5kbGVyXHJcbik7XHJcbmNvbnN0IHBvcHVwRGVsZXRlID0gbmV3IFBvcHVwV2l0aEZvcm0oXCIjZGVsZXRlLW1vZGFsXCIsIGhhbmRsZURlbGV0ZVN1Ym1pdCk7XHJcblxyXG4vLyBGT1JNIFZBTElEQVRJT05cclxuY29uc3QgYXZhdGFyRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKG9wdGlvbnMsIGF2YXRhckZvcm0pO1xyXG5jb25zdCBwcm9maWxlRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKG9wdGlvbnMsIHByb2ZpbGVGb3JtKTtcclxuY29uc3QgYWRkQ2FyZEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihvcHRpb25zLCBhZGRDYXJkRm9ybSk7XHJcblxyXG4vLyBDQVJEU1xyXG5jb25zdCBjdXJyZW50Q2FyZElkID0geyBpZDogXCJcIiB9O1xyXG5jb25zdCBhcGkgPSBuZXcgQXBpKHtcclxuICBiYXNlVXJsOiBcImh0dHBzOi8vYXJvdW5kLWFwaS5lbi50cmlwbGV0ZW4tc2VydmljZXMuY29tL3YxXCIsXHJcbiAgaGVhZGVyczoge1xyXG4gICAgYXV0aG9yaXphdGlvbjogXCIzZjQyODdjYy0wMjY3LTRmODQtODBlZC04ODYyN2ExY2NlODRcIixcclxuICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gIH0sXHJcbn0pO1xyXG5jb25zdCBpbml0aWFsQ2FyZHMgPSBhcGlcclxuICAucmV0dXJuRGF0YSgpXHJcbiAgLnRoZW4oKFt1c2VyRGF0YSwgY2FyZHNdKSA9PiB7XHJcbiAgICB1c2VyLnNldFVzZXJBdmF0YXIodXNlckRhdGEuYXZhdGFyKTtcclxuICAgIHVzZXIuc2V0VXNlckluZm8odXNlckRhdGEpO1xyXG4gICAgY2FyZHMuZm9yRWFjaCgoY2FyZCkgPT4ge1xyXG4gICAgICByZW5kZXJlcihjYXJkKTtcclxuICAgIH0pO1xyXG4gIH0pXHJcbiAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICB9KTtcclxuY29uc3QgY2FyZFRlbXBsYXRlID1cclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NhcmRfX3RlbXBsYXRlXCIpLmNvbnRlbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbmNvbnN0IGNyZWF0ZUNhcmQgPSAoY2FyZERhdGEpID0+IHtcclxuICBjb25zdCBuZXdDYXJkID0gbmV3IENhcmQoXHJcbiAgICBjYXJkRGF0YSxcclxuICAgIGNhcmRUZW1wbGF0ZSxcclxuICAgIGhhbmRsZUltYWdlQ2xpY2ssXHJcbiAgICBoYW5kbGVEZWxldGVCdXR0b25DbGljayxcclxuICAgIGhhbmRsZUxpa2VCdXR0b25DbGlja1xyXG4gICk7XHJcbiAgcmV0dXJuIG5ld0NhcmQuY3JlYXRlQ2FyZCgpO1xyXG59O1xyXG5cclxuLy8gU0VDVElPTlxyXG5jb25zdCByZW5kZXJlciA9IChjYXJkRGF0YSkgPT4ge1xyXG4gIGNvbnN0IGNhcmRFbGVtZW50ID0gY3JlYXRlQ2FyZChjYXJkRGF0YSk7XHJcbiAgc2VjdGlvbi5hZGRJdGVtKGNhcmRFbGVtZW50KTtcclxufTtcclxuY29uc3Qgc2VjdGlvbiA9IG5ldyBTZWN0aW9uKFxyXG4gIHsgaXRlbXM6IGluaXRpYWxDYXJkcywgcmVuZGVyZXIgfSxcclxuICBcIi5nYWxsZXJ5X19jYXJkc1wiXHJcbik7XHJcblxyXG4vLyBCVVRUT05TXHJcbmNvbnN0IGF2YXRhckJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9faW1hZ2UtYnV0dG9uXCIpO1xyXG5jb25zdCBlZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19lZGl0LWJ1dHRvblwiKTtcclxuY29uc3QgYWRkQ2FyZEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fYWRkLWJ1dHRvblwiKTtcclxuXHJcbi8vIEZVTkNUSU9OU1xyXG5mdW5jdGlvbiBoYW5kbGVJbWFnZUNsaWNrKGV2dCkge1xyXG4gIGNvbnN0IGltYWdlRGF0YSA9IHtcclxuICAgIG5hbWU6IGV2dC5hbHQsXHJcbiAgICBsaW5rOiBldnQuc3JjLFxyXG4gIH07XHJcbiAgaW1hZ2VNb2RhbC5vcGVuKGltYWdlRGF0YSk7XHJcbn1cclxuZnVuY3Rpb24gYXZhdGFyQnV0dG9uQ2xpY2tIYW5kbGVyKCkge1xyXG4gIHBvcHVwQXZhdGFyRm9ybS5vcGVuKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGF2YXRhckZvcm1TdWJtaXRIYW5kbGVyKGF2YXRhckxpbmspIHtcclxuICBjb25zdCBhdmF0YXJVcmwgPSBhdmF0YXJMaW5rLnVybDtcclxuICByZXR1cm4gYXBpXHJcbiAgICAucGF0Y2hBdmF0YXIoYXZhdGFyVXJsKVxyXG4gICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICB1c2VyLnNldFVzZXJBdmF0YXIoYXZhdGFyVXJsKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZWRpdEJ1dHRvbkNsaWNrSGFuZGxlcigpIHtcclxuICBjb25zdCBjdXJyZW50VXNlciA9IHVzZXIuZ2V0VXNlckluZm8oKTtcclxuICBwcm9maWxlRm9ybU5hbWUudmFsdWUgPSBjdXJyZW50VXNlci5uYW1lO1xyXG4gIHByb2ZpbGVGb3JtRGVzYy52YWx1ZSA9IGN1cnJlbnRVc2VyLmFib3V0O1xyXG4gIHByb2ZpbGVGb3JtVmFsaWRhdG9yLmVuYWJsZUZvcm1CdXR0b24oKTtcclxuICBwb3B1cFByb2ZpbGVGb3JtLm9wZW4oKTtcclxufVxyXG5mdW5jdGlvbiBwcm9maWxlRm9ybVN1Ym1pdEhhbmRsZXIoaW5wdXRWYWx1ZXMpIHtcclxuICByZXR1cm4gYXBpXHJcbiAgICAucGF0Y2hVc2VySW5mbyhpbnB1dFZhbHVlcylcclxuICAgIC50aGVuKHVzZXIuc2V0VXNlckluZm8oaW5wdXRWYWx1ZXMpKVxyXG4gICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZENhcmRCdXR0b25DbGlja0hhbmRsZXIoKSB7XHJcbiAgcG9wdXBBZGRDYXJkRm9ybS5vcGVuKCk7XHJcbn1cclxuZnVuY3Rpb24gYWRkQ2FyZEZvcm1TdWJtaXRIYW5kbGVyKGlucHV0VmFsdWVzKSB7XHJcbiAgY29uc3QgY2FyZERhdGEgPSB7XHJcbiAgICBuYW1lOiBpbnB1dFZhbHVlcy50aXRsZSxcclxuICAgIGxpbms6IGlucHV0VmFsdWVzLnVybCxcclxuICB9O1xyXG5cclxuICByZXR1cm4gYXBpXHJcbiAgICAucG9zdE5ld0NhcmQoY2FyZERhdGEpXHJcbiAgICAudGhlbigobmV3Q2FyZCkgPT4ge1xyXG4gICAgICBzZWN0aW9uLmFkZEl0ZW0oY3JlYXRlQ2FyZChuZXdDYXJkKSk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgfSlcclxuICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgcG9wdXBBZGRDYXJkRm9ybS5jbG9zZSgpO1xyXG4gICAgICBhZGRDYXJkRm9ybVZhbGlkYXRvci5kaXNhYmxlRm9ybUJ1dHRvbigpO1xyXG4gICAgICBhZGRDYXJkRm9ybS5yZXNldCgpO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gaGFuZGxlRGVsZXRlQnV0dG9uQ2xpY2soY2FyZElkKSB7XHJcbiAgY3VycmVudENhcmRJZC5pZCA9IGNhcmRJZDtcclxuICBwb3B1cERlbGV0ZS5vcGVuKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZURlbGV0ZVN1Ym1pdCgpIHtcclxuICByZXR1cm4gYXBpXHJcbiAgICAuZGVsZXRlQ2FyZChjdXJyZW50Q2FyZElkLmlkKVxyXG4gICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICBsZXQgY2FyZFRvUmVtb3ZlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY3VycmVudENhcmRJZC5pZCk7XHJcbiAgICAgIGNhcmRUb1JlbW92ZS5yZW1vdmUoKTtcclxuICAgICAgY2FyZFRvUmVtb3ZlID0gbnVsbDtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBoYW5kbGVMaWtlQnV0dG9uQ2xpY2soY2FyZElkLCBpc0xpa2VkKSB7XHJcbiAgY3VycmVudENhcmRJZC5pZCA9IGNhcmRJZDtcclxuICBpZiAoaXNMaWtlZCkge1xyXG4gICAgYXBpLnJlbW92ZUxpa2UoY3VycmVudENhcmRJZC5pZCkuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICB9KTtcclxuICB9IGVsc2Uge1xyXG4gICAgYXBpLmFkZExpa2UoY3VycmVudENhcmRJZC5pZCkuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbi8vIENMQVNTIE1FVEhPRCBDQUxMRVJTXHJcblxyXG5pbWFnZU1vZGFsLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbnByb2ZpbGVGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuYWRkQ2FyZEZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5hdmF0YXJGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuXHJcbi8vIElOSVRJQUwgRVZFTlQgTElTVEVORVJTXHJcbmF2YXRhckJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYXZhdGFyQnV0dG9uQ2xpY2tIYW5kbGVyKTtcclxuZWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZWRpdEJ1dHRvbkNsaWNrSGFuZGxlcik7XHJcbmFkZENhcmRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFkZENhcmRCdXR0b25DbGlja0hhbmRsZXIpO1xyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHN1cGVyKHsgcG9wdXBTZWxlY3RvciB9KTtcclxuICAgIHRoaXMuX3BvcHVwSW1hZ2UgPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9faW1hZ2VcIik7XHJcbiAgICB0aGlzLl9wb3B1cERlc2NyaXB0aW9uID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLm1vZGFsX19pbWFnZS1mb290aW5nXCJcclxuICAgICk7XHJcbiAgfVxyXG4gIG9wZW4oeyBuYW1lLCBsaW5rIH0pIHtcclxuICAgIHRoaXMuX3BvcHVwSW1hZ2Uuc3JjID0gbGluaztcclxuICAgIHRoaXMuX3BvcHVwSW1hZ2UuYWx0ID0gYFRoaXMgaXMgYSBwaWN0dXJlIG9mICR7bmFtZX1gO1xyXG4gICAgdGhpcy5fcG9wdXBEZXNjcmlwdGlvbi50ZXh0Q29udGVudCA9IG5hbWU7XHJcbiAgICBzdXBlci5vcGVuKCk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXIge1xyXG4gIGNvbnN0cnVjdG9yKHsgbmFtZVNlbGVjdG9yLCBhYm91dFNlbGVjdG9yLCBhdmF0YXJTZWxlY3RvciB9KSB7XHJcbiAgICB0aGlzLl9uYW1lRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobmFtZVNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2Fib3V0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYWJvdXRTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9hdmF0YXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhdmF0YXJTZWxlY3Rvcik7XHJcbiAgfVxyXG4gIGdldFVzZXJJbmZvKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmFtZTogdGhpcy5fbmFtZUVsZW1lbnQudGV4dENvbnRlbnQsXHJcbiAgICAgIGFib3V0OiB0aGlzLl9hYm91dEVsZW1lbnQudGV4dENvbnRlbnQsXHJcbiAgICAgIGF2YXRhcjogdGhpcy5fYXZhdGFyRWxlbWVudC5zcmMsXHJcbiAgICB9O1xyXG4gIH1cclxuICBzZXRVc2VySW5mbyh7IG5hbWUsIGFib3V0IH0pIHtcclxuICAgIHRoaXMuX25hbWVFbGVtZW50LnRleHRDb250ZW50ID0gbmFtZTtcclxuICAgIHRoaXMuX2Fib3V0RWxlbWVudC50ZXh0Q29udGVudCA9IGFib3V0O1xyXG4gIH1cclxuICBzZXRVc2VyQXZhdGFyKGF2YXRhcikge1xyXG4gICAgdGhpcy5fYXZhdGFyRWxlbWVudC5zcmMgPSBhdmF0YXI7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwaSB7XHJcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgfVxyXG4gIF9nZXRVc2VyQXZhdGFyKCkge1xyXG4gICAgcmV0dXJuIGZldGNoKHRoaXMuX29wdGlvbnMuYmFzZVVybCArIFwiL3VzZXJzL21lL2F2YXRhclwiLCB7XHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl9vcHRpb25zLmhlYWRlcnMuYXV0aG9yaXphdGlvbixcclxuICAgICAgfSxcclxuICAgIH0pLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIF9nZXRVc2VyRGF0YSgpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9vcHRpb25zLmJhc2VVcmx9L3VzZXJzL21lYCwge1xyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgYXV0aG9yaXphdGlvbjogdGhpcy5fb3B0aW9ucy5oZWFkZXJzLmF1dGhvcml6YXRpb24sXHJcbiAgICAgIH0sXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHtcclxuICAgICAgaWYgKHJlcy5vaykge1xyXG4gICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBfZ2V0SW5pdGlhbENhcmRzKCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX29wdGlvbnMuYmFzZVVybH0vY2FyZHNgLCB7XHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl9vcHRpb25zLmhlYWRlcnMuYXV0aG9yaXphdGlvbixcclxuICAgICAgfSxcclxuICAgIH0pLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHJldHVybkRhdGEoKSB7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoW3RoaXMuX2dldFVzZXJEYXRhKCksIHRoaXMuX2dldEluaXRpYWxDYXJkcygpXSk7XHJcbiAgfVxyXG4gIHBhdGNoVXNlckluZm8oeyBuYW1lLCBhYm91dCB9KSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fb3B0aW9ucy5iYXNlVXJsfS91c2Vycy9tZWAsIHtcclxuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl9vcHRpb25zLmhlYWRlcnMuYXV0aG9yaXphdGlvbixcclxuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgfSxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgYWJvdXQ6IGFib3V0LFxyXG4gICAgICB9KSxcclxuICAgIH0pLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHBhdGNoQXZhdGFyKGF2YXRhckxpbmspIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9vcHRpb25zLmJhc2VVcmx9L3VzZXJzL21lL2F2YXRhcmAsIHtcclxuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl9vcHRpb25zLmhlYWRlcnMuYXV0aG9yaXphdGlvbixcclxuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgfSxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIGF2YXRhcjogYXZhdGFyTGluayxcclxuICAgICAgfSksXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHtcclxuICAgICAgaWYgKHJlcy5vaykge1xyXG4gICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBwb3N0TmV3Q2FyZCh7IG5hbWUsIGxpbmsgfSkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX29wdGlvbnMuYmFzZVVybH0vY2FyZHNgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl9vcHRpb25zLmhlYWRlcnMuYXV0aG9yaXphdGlvbixcclxuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgfSxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgbGluazogbGluayxcclxuICAgICAgfSksXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHtcclxuICAgICAgaWYgKHJlcy5vaykge1xyXG4gICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBkZWxldGVDYXJkKGNhcmRJZCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX29wdGlvbnMuYmFzZVVybH0vY2FyZHMvJHtjYXJkSWR9YCwge1xyXG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl9vcHRpb25zLmhlYWRlcnMuYXV0aG9yaXphdGlvbixcclxuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgfSxcclxuICAgIH0pLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhZGRMaWtlKGNhcmRJZCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX29wdGlvbnMuYmFzZVVybH0vY2FyZHMvJHtjYXJkSWR9L2xpa2VzYCwge1xyXG4gICAgICBtZXRob2Q6IFwiUFVUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl9vcHRpb25zLmhlYWRlcnMuYXV0aG9yaXphdGlvbixcclxuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgfSxcclxuICAgIH0pLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHJlbW92ZUxpa2UoY2FyZElkKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fb3B0aW9ucy5iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH0vbGlrZXNgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgIGF1dGhvcml6YXRpb246IHRoaXMuX29wdGlvbnMuaGVhZGVycy5hdXRob3JpemF0aW9uLFxyXG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICB9LFxyXG4gICAgfSkudGhlbigocmVzKSA9PiB7XHJcbiAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yOiAke3Jlcy5zdGF0dXN9YCk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeyBpdGVtcywgcmVuZGVyZXIgfSwgZWxlbWVudFNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xyXG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcclxuICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWxlbWVudFNlbGVjdG9yKTtcclxuICB9XHJcbiAgcmVuZGVySXRlbXMoKSB7XHJcbiAgICB0aGlzLl9pdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgIHRoaXMuX3JlbmRlcmVyKGl0ZW0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIGFkZEl0ZW0oZWxlbWVudCkge1xyXG4gICAgdGhpcy5fY29udGFpbmVyLnByZXBlbmQoZWxlbWVudCk7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJvcHRpb25zIiwiZm9ybVNlbGVjdG9yIiwiaW5wdXRTZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsImVycm9yQ2xhc3MiLCJDYXJkIiwiY29uc3RydWN0b3IiLCJkYXRhIiwiY2FyZFNlbGVjdG9yIiwiaGFuZGxlSW1hZ2VDbGljayIsImhhbmRsZURlbGV0ZUJ1dHRvbkNsaWNrIiwiaGFuZGxlTGlrZUJ1dHRvbkNsaWNrIiwidGhpcyIsIl9uYW1lIiwibmFtZSIsIl9saW5rIiwibGluayIsIl9pZCIsIl9pc0xpa2VkIiwiaXNMaWtlZCIsIl9jYXJkU2VsZWN0b3IiLCJfaGFuZGxlSW1hZ2VDbGljayIsIl9oYW5kbGVEZWxldGVCdXR0b25DbGljayIsIl9oYW5kbGVMaWtlQnV0dG9uQ2xpY2siLCJfc2V0Q2FyZEltYWdlTGlzdGVuZXJzIiwiX2NhcmRJbWFnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJfY2hlY2tMaWtlZCIsIl9saWtlQnV0dG9uIiwiY2xhc3NMaXN0IiwiYWRkIiwiX3RvZ2dsZUxpa2UiLCJ0b2dnbGUiLCJfc2V0TGlrZUJ1dHRvbkxpc3RlbmVycyIsIl9zZXRUcmFzaEJ1dHRvbkxpc3RlbmVycyIsIl90cmFzaEJ1dHRvbiIsImNyZWF0ZUNhcmQiLCJfY2FyZEVsZW1lbnQiLCJjbG9uZU5vZGUiLCJxdWVyeVNlbGVjdG9yIiwiX2NhcmREZXNjIiwidGV4dENvbnRlbnQiLCJzcmMiLCJzZXRBdHRyaWJ1dGUiLCJGb3JtVmFsaWRhdG9yIiwiZm9ybUVsZW1lbnQiLCJfb3B0aW9ucyIsIl9mb3JtRWxlbWVudCIsIl9pbnB1dEVsZW1lbnRzIiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsIl9zdWJtaXRCdXR0b24iLCJfaW5wdXRFcnJvckNsYXNzIiwiX2Vycm9yQ2xhc3MiLCJfaW5hY3RpdmVCdXR0b25DbGFzcyIsIl9zaG93SW5wdXRFcnJvciIsImlucHV0RWxlbWVudCIsImVycm9yRWxlbWVudCIsImlkIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJfaGlkZUlucHV0RXJyb3IiLCJyZW1vdmUiLCJfY2hlY2tJbnB1dFZhbGlkaXR5IiwidmFsaWRpdHkiLCJ2YWxpZCIsIl9oYXNJbnZhbGlkSW5wdXQiLCJzb21lIiwiX3RvZ2dsZUJ1dHRvblN0YXRlIiwiZGlzYWJsZUZvcm1CdXR0b24iLCJlbmFibGVGb3JtQnV0dG9uIiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiZm9yRWFjaCIsImRpc2FibGVkIiwiZW5hYmxlVmFsaWRhdGlvbiIsImV2dCIsInByZXZlbnREZWZhdWx0IiwicmVzZXRGb3JtVmFsaWRhdGlvbiIsIlBvcHVwIiwiX3JlZiIsInBvcHVwU2VsZWN0b3IiLCJfcG9wdXBFbGVtZW50IiwiZG9jdW1lbnQiLCJfY2xvc2VCdXR0b24iLCJfaGFuZGxlRXNjQ2xvc2UiLCJrZXkiLCJjbG9zZSIsInNldEV2ZW50TGlzdGVuZXJzIiwidGFyZ2V0Iiwib3BlbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJQb3B1cFdpdGhGb3JtIiwiaGFuZGxlRm9ybVN1Ym1pdCIsInN1cGVyIiwiX3BvcHVwRm9ybSIsIl9wb3B1cEZvcm1JbnB1dHMiLCJfcG9wdXBCdXR0b24iLCJfaGFuZGxlRm9ybVN1Ym1pdCIsIl9oYW5kbGVTdWJtaXRMaXN0ZW5lciIsImlucHV0VmFsdWVzIiwiX2dldElucHV0VmFsdWVzIiwidGhlbiIsInNldFRpbWVvdXQiLCJjYXRjaCIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsImlucHV0IiwidmFsdWUiLCJlZGl0UHJvZmlsZU1vZGFsIiwiaW1hZ2VNb2RhbCIsIl9wb3B1cEltYWdlIiwiX3BvcHVwRGVzY3JpcHRpb24iLCJhbHQiLCJhdmF0YXJGb3JtIiwiZm9ybXMiLCJwcm9maWxlRm9ybSIsInByb2ZpbGVGb3JtTmFtZSIsInByb2ZpbGVGb3JtRGVzYyIsImFkZENhcmRGb3JtIiwidXNlciIsIm5hbWVTZWxlY3RvciIsImFib3V0U2VsZWN0b3IiLCJhdmF0YXJTZWxlY3RvciIsIl9uYW1lRWxlbWVudCIsIl9hYm91dEVsZW1lbnQiLCJfYXZhdGFyRWxlbWVudCIsImdldFVzZXJJbmZvIiwiYWJvdXQiLCJhdmF0YXIiLCJzZXRVc2VySW5mbyIsIl9yZWYyIiwic2V0VXNlckF2YXRhciIsInBvcHVwQXZhdGFyRm9ybSIsImF2YXRhckxpbmsiLCJhdmF0YXJVcmwiLCJ1cmwiLCJhcGkiLCJwYXRjaEF2YXRhciIsInBvcHVwUHJvZmlsZUZvcm0iLCJwYXRjaFVzZXJJbmZvIiwicG9wdXBBZGRDYXJkRm9ybSIsImNhcmREYXRhIiwidGl0bGUiLCJwb3N0TmV3Q2FyZCIsIm5ld0NhcmQiLCJzZWN0aW9uIiwiYWRkSXRlbSIsImZpbmFsbHkiLCJhZGRDYXJkRm9ybVZhbGlkYXRvciIsInJlc2V0IiwicG9wdXBEZWxldGUiLCJkZWxldGVDYXJkIiwiY3VycmVudENhcmRJZCIsImNhcmRUb1JlbW92ZSIsImdldEVsZW1lbnRCeUlkIiwiYXZhdGFyRm9ybVZhbGlkYXRvciIsInByb2ZpbGVGb3JtVmFsaWRhdG9yIiwiX2dldFVzZXJBdmF0YXIiLCJmZXRjaCIsImJhc2VVcmwiLCJoZWFkZXJzIiwiYXV0aG9yaXphdGlvbiIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXMiLCJfZ2V0VXNlckRhdGEiLCJfZ2V0SW5pdGlhbENhcmRzIiwicmV0dXJuRGF0YSIsImFsbCIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiY2FyZElkIiwiYWRkTGlrZSIsInJlbW92ZUxpa2UiLCJpbml0aWFsQ2FyZHMiLCJ1c2VyRGF0YSIsImNhcmRzIiwiY2FyZCIsInJlbmRlcmVyIiwiY2FyZFRlbXBsYXRlIiwiY29udGVudCIsImZpcnN0RWxlbWVudENoaWxkIiwiY2FyZEVsZW1lbnQiLCJlbGVtZW50U2VsZWN0b3IiLCJpdGVtcyIsIl9pdGVtcyIsIl9yZW5kZXJlciIsIl9jb250YWluZXIiLCJyZW5kZXJJdGVtcyIsIml0ZW0iLCJlbGVtZW50IiwicHJlcGVuZCIsImF2YXRhckJ1dHRvbiIsImVkaXRCdXR0b24iLCJhZGRDYXJkQnV0dG9uIiwiaW1hZ2VEYXRhIiwiY3VycmVudFVzZXIiXSwic291cmNlUm9vdCI6IiJ9