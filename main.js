!function(){"use strict";const t={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"};class e{constructor(t,e,s,r,i){this._name=t.name,this._link=t.link,this._id=t._id,this._isLiked=t.isLiked,this._cardSelector=e,this._handleImageClick=s,this._handleDeleteButtonClick=r,this._handleLikeButtonClick=i}_setCardImageListeners(){this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this._cardImage)}))}_checkLiked(){this._isLiked&&this._likeButton.classList.add("card__like-button_active")}_toggleLike=()=>{this._isLiked=!this._isLiked,this._likeButton.classList.toggle("card__like-button_active")};_setLikeButtonListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeButtonClick(this._id,this._isLiked,this._toggleLike)}))}_setTrashButtonListeners(){this._trashButton.addEventListener("click",(()=>{this._handleDeleteButtonClick(this._id)}))}createCard(){return this._cardElement=this._cardSelector.cloneNode(!0),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardDesc=this._cardElement.querySelector(".card__description"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._trashButton=this._cardElement.querySelector(".card__trash-button"),this._cardDesc.textContent=this._name,this._cardImage.src=this._link,this._cardImage.setAttribute("alt",this._name),this._cardElement.setAttribute("id",this._id),this._setCardImageListeners(),this._setLikeButtonListeners(),this._setTrashButtonListeners(),this._checkLiked(),this._cardElement}}class s{constructor(t,e){this._options=t,this._formElement=e,this._inputElements=Array.from(this._formElement.querySelectorAll(this._options.inputSelector)),this._submitButton=this._formElement.querySelector(this._options.submitButtonSelector),this._inputErrorClass=this._options.inputErrorClass,this._errorClass=this._options.errorClass,this._inactiveButtonClass=this._options.inactiveButtonClass}_showInputError(t){const e=this._formElement.querySelector(`#${t.id}-error`);t.classList.add(this._inputErrorClass),e.textContent=t.validationMessage,e.classList.add(this._errorClass)}_hideInputError(t){const e=this._formElement.querySelector(`#${t.id}-error`);t.classList.remove(this._inputErrorClass),e.textContent="",e.classList.remove(this._errorClass)}_checkInputValidity(t){t.validity.valid?this._hideInputError(t):this._showInputError(t)}_hasInvalidInput(){return this._inputElements.some((t=>!t.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this.disableFormButton():this.enableFormButton()}_setEventListeners(){this._toggleButtonState(),this._inputElements.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState()}))}))}disableFormButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}enableFormButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}enableValidation(){this._formElement.addEventListener("submit",(t=>{t.preventDefault()})),this._setEventListeners()}resetFormValidation(){this._inputElements.forEach((t=>{this._checkInputValidity(t)}))}}class r{constructor(t){let{popupSelector:e}=t;this._popupElement=document.querySelector(e),this._closeButton=this._popupElement.querySelector(".modal__close-button"),this._handleEscClose=t=>{"Escape"===t.key&&this.close()}}setEventListeners(){this._closeButton.addEventListener("click",(()=>this.close())),this._popupElement.addEventListener("click",(t=>{t.target===this._popupElement&&this.close()}))}open(){document.addEventListener("keydown",this._handleEscClose),this._popupElement.classList.add("modal_opened")}close(){document.removeEventListener("keydown",this._handleEscClose),this._popupElement.classList.remove("modal_opened")}}class i extends r{constructor(t,e,s){super({popupSelector:t}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._popupFormInputs=this._popupElement.querySelectorAll(".modal__input"),this._popupButton=this._popupElement.querySelector(".modal__button"),this._handleFormSubmit=e,this._defaultButtonText=s,this._handleSubmitListener=t=>{t.preventDefault(),this._popupButton.textContent="Saving...";const e=this._getInputValues();this._handleFormSubmit(e).then((()=>{this.close()})).catch((t=>{console.error(t)})).finally((()=>{setTimeout((()=>{this._popupButton.textContent=this._defaultButtonText}),500)}))},this.setEventListeners()}_getInputValues(){const t={};return this._popupFormInputs.forEach((e=>{t[e.name]=e.value})),t}setInputValues(t){this._popupFormInputs.forEach((e=>{e.value=t[e.name]}))}setEventListeners(){this._popupForm.addEventListener("submit",this._handleSubmitListener),super.setEventListeners()}}const n=new i("#avatar-modal",(function(t){const e=t.url;return b.patchAvatar(e).then((()=>{d.setUserAvatar(e)})).then((()=>{m.disableFormButton(),c.reset()})).catch((t=>(console.error(t),Promise.reject(`Error: ${t}`))))}),"Save"),o=new i("#edit-modal",(function(t){return b.patchUserInfo(t).then(d.setUserInfo(t)).catch((t=>(console.error(t),Promise.reject(`Error: ${t}`))))}),"Save"),a=new i("#add-modal",(function(t){const e={name:t.title,link:t.url};return b.postNewCard(e).then((t=>{L.addItem(k(t))})).then((()=>{E.disableFormButton(),_.reset()})).catch((t=>(console.error(t),Promise.reject(`Error: ${t}`))))}),"Save"),l=new i("#delete-modal",(function(){return b.deleteCard(v.id).then((()=>{let t=document.getElementById(v.id);t.remove(),t=null})).catch((t=>(console.error(t),Promise.reject(`Error: ${t}`))))}),"Yes"),h=new class extends r{constructor(t){super({popupSelector:t}),this._popupImage=this._popupElement.querySelector(".modal__image"),this._popupDescription=this._popupElement.querySelector(".modal__image-footing")}open(t){let{name:e,link:s}=t;this._popupImage.src=s,this._popupImage.alt=`This is a picture of ${e}`,this._popupDescription.textContent=e,super.open()}}("#image-modal"),c=document.forms["avatar-form"],u=document.forms["profile-form"],_=document.forms["add-card-form"],d=new class{constructor(t){let{nameSelector:e,aboutSelector:s,avatarSelector:r}=t;this._nameElement=document.querySelector(e),this._aboutElement=document.querySelector(s),this._avatarElement=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,about:this._aboutElement.textContent,avatar:this._avatarElement.src}}setUserInfo(t){let{name:e,about:s}=t;this._nameElement.textContent=e,this._aboutElement.textContent=s}setUserAvatar(t){this._avatarElement.src=t}}({nameSelector:".profile__name",aboutSelector:".profile__description",avatarSelector:".profile__image"}),m=new s(t,c),p=new s(t,u),E=new s(t,_),v={id:""},b=new class{constructor(t){this._options=t,this._baseUrl=t.baseUrl,this._headers=t.headers}_request(t,e){return fetch(t,e).then(this._checkResponse)}_checkResponse(t){return t.ok?t.json():Promise.reject(`Error: ${t.status}`)}_getUserAvatar(){return this._request(`${this._baseUrl}/users/me/avatar`,{headers:this._headers})}_getUserData(){return this._request(`${this._baseUrl}/users/me`,{headers:this._headers})}_getInitialCards(){return this._request(`${this._baseUrl}/cards`,{headers:this._headers})}returnData(){return Promise.all([this._getUserData(),this._getInitialCards()])}patchUserInfo(t){let{name:e,about:s}=t;return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:s})})}patchAvatar(t){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})})}postNewCard(t){let{name:e,link:s}=t;return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:s})})}deleteCard(t){return this._request(`${this._baseUrl}/cards/${t}`,{method:"DELETE",headers:this._headers})}addLike(t){return this._request(`${this._baseUrl}/cards/${t}/likes`,{method:"PUT",headers:this._headers})}removeLike(t){return this._request(`${this._baseUrl}/cards/${t}/likes`,{method:"DELETE",headers:this._headers})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"3f4287cc-0267-4f84-80ed-88627a1cce84","Content-Type":"application/json"}});b.returnData().then((t=>{let[e,s]=t;d.setUserAvatar(e.avatar),d.setUserInfo(e),L.renderItems(s)})).catch((t=>{console.error(t)}));const f=document.querySelector("#card__template").content.firstElementChild,k=t=>new e(t,f,I,B,y).createCard(),L=new class{constructor(t,e){this._renderer=t,this._container=document.querySelector(e)}renderItems(t){t.forEach((t=>{this._renderer(t)}))}addItem(t){this._container.prepend(t)}}((t=>{const e=k(t);L.addItem(e)}),".gallery__cards"),S=document.querySelector(".profile__image-button"),g=document.querySelector(".profile__edit-button"),C=document.querySelector(".profile__add-button");function I(t){const e={name:t.alt,link:t.src};h.open(e)}function B(t){v.id=t,l.open()}function y(t,e,s){return v.id=t,e?b.removeLike(v.id).then((()=>{s()})).catch((t=>{console.error(t)})):b.addLike(v.id).then((()=>{s()})).catch((t=>{console.error(t)}))}h.setEventListeners(),p.enableValidation(),E.enableValidation(),m.enableValidation(),S.addEventListener("click",(function(){n.open()})),g.addEventListener("click",(function(){const t=d.getUserInfo();console.log(t),o.setInputValues(t),p.enableFormButton(),o.open()})),C.addEventListener("click",(function(){a.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,