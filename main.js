!function(){"use strict";const t={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"};class e{constructor(t,e,s){this._name=t.name,this._link=t.link,this._cardSelector=e,this._handleImageClick=s}_setCardImageListeners(){this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this._cardImage)}))}_setLikeButtonListeners(){this._likeButton.addEventListener("click",(()=>{this._likeButton.classList.toggle("card__like-button_active")}))}_setTrashButtonListeners(){this._trashButton.addEventListener("click",(()=>{this._cardElement.remove(),this._cardElement=null}))}createCard(){return this._cardElement=this._cardSelector.cloneNode(!0),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardDesc=this._cardElement.querySelector(".card__description"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._trashButton=this._cardElement.querySelector(".card__trash-button"),this._cardDesc.textContent=this._name,this._cardImage.src=this._link,this._cardImage.setAttribute("alt",this._name),this._setCardImageListeners(),this._setLikeButtonListeners(),this._setTrashButtonListeners(),this._cardElement}}class s{constructor(t,e){this._options=t,this._formElement=e,this._inputElements=Array.from(this._formElement.querySelectorAll(this._options.inputSelector)),this._submitButton=this._formElement.querySelector(this._options.submitButtonSelector),this._inputErrorClass=this._options.inputErrorClass,this._errorClass=this._options.errorClass,this._inactiveButtonClass=this._options.inactiveButtonClass}_showInputError(t){const e=this._formElement.querySelector(`#${t.id}-error`);t.classList.add(this._inputErrorClass),e.textContent=t.validationMessage,e.classList.add(this._errorClass)}_hideInputError(t){const e=this._formElement.querySelector(`#${t.id}-error`);t.classList.remove(this._inputErrorClass),e.textContent="",e.classList.remove(this._errorClass)}_checkInputValidity(t){t.validity.valid?this._hideInputError(t):this._showInputError(t)}_hasInvalidInput(){return this._inputElements.some((t=>!t.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this.disableFormButton():this.enableFormButton()}_setEventListeners(){this._toggleButtonState(),this._inputElements.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState()}))}))}disableFormButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}enableFormButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}enableValidation(){this._formElement.addEventListener("submit",(t=>{t.preventDefault()})),this._setEventListeners()}resetFormValidation(){this._inputElements.forEach((t=>{this._checkInputValidity(t)}))}}class n{constructor(t){let{popupSelector:e}=t;this._popupElement=document.querySelector(e),this._closeButton=this._popupElement.querySelector(".modal__close-button"),this._handleEscClose=t=>{"Escape"===t.key&&this.close()}}setEventListeners(){this._closeButton.addEventListener("click",(()=>this.close())),this._popupElement.addEventListener("click",(t=>{t.target===this._popupElement&&this.close()}))}open(){document.addEventListener("keydown",this._handleEscClose),this._popupElement.classList.add("modal_opened")}close(){document.removeEventListener("keydown",this._handleEscClose),this._popupElement.classList.remove("modal_opened")}}class o extends n{constructor(t,e){super({popupSelector:t}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._popupFormInputs=this._popupElement.querySelectorAll(".modal__input"),this._handleFormSubmit=e,this._handleSubmitListener=t=>{t.preventDefault();const e=this._getInputValues();this._handleFormSubmit(e),this.close()},this.setEventListeners()}_getInputValues(){const t={};return this._popupFormInputs.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){this._popupForm.addEventListener("submit",this._handleSubmitListener),super.setEventListeners()}}const i=document.querySelector("#edit-modal"),r=(document.querySelector("#add-modal"),new class extends n{constructor(t){super({popupSelector:t}),this._popupImage=this._popupElement.querySelector(".modal__image"),this._popupDescription=this._popupElement.querySelector(".modal__image-footing")}open(t){let{name:e,link:s}=t;this._popupImage.src=s,this._popupImage.alt=`This is a picture of ${e}`,this._popupDescription.textContent=e,super.open()}}("#image-modal")),a=document.forms["profile-form"],l=i.querySelector("[name = 'name']"),c=i.querySelector("[name = 'description']"),u=document.forms["add-card-form"],m=new class{constructor(t){let{nameSelector:e,descriptionSelector:s}=t;this._nameElement=document.querySelector(e),this._descriptionElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,description:this._descriptionElement.textContent}}setUserInfo(t){let{name:e,description:s}=t;this._nameElement.textContent=e,this._descriptionElement.textContent=s}}({nameSelector:".profile__name",descriptionSelector:".profile__description"}),d=new o("#edit-modal",(function(t){m.setUserInfo(t)})),_=new o("#add-modal",(function(t){const e={name:t.title,link:t.url};v.addItem(g(e)),_.close(),h.disableFormButton(),u.reset()})),p=new s(t,a),h=new s(t,u),E=document.querySelector("#card__template").content.firstElementChild,g=t=>new e(t,E,L).createCard(),v=new class{constructor(t,e){let{items:s,renderer:n}=t;this._items=s,this._renderer=n,this._container=document.querySelector(e)}renderItems(){this._items.forEach((t=>{this._renderer(t)}))}addItem(t){this._container.prepend(t)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:t=>{const e=g(t);v.addItem(e)}},".gallery__cards"),S=document.querySelector(".profile__edit-button"),f=document.querySelector(".profile__add-button");function L(t){const e={name:t.alt,link:t.src};r.open(e)}v.renderItems(),r.setEventListeners(),p.enableValidation(),h.enableValidation(),S.addEventListener("click",(function(){const t=m.getUserInfo();l.value=t.name,c.value=t.description,p.enableFormButton(),d.open()})),f.addEventListener("click",(function(){_.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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aUIsU0EvQjVCLFdBQ0UsTUFBTXdILEVBQWtCcEMsRUFBU0ssY0FDakNSLEVBQWdCUixNQUFRK0MsRUFBZ0IvSCxLQUN4Q3lGLEVBQWdCVCxNQUFRK0MsRUFBZ0I5QixZQUN4Q1ksRUFBcUI1RCxtQkFDckJtRCxFQUFpQmhDLE1BQ25CLElBMEJBeUQsRUFBY3RILGlCQUFpQixTQXRCL0IsV0FDRThGLEVBQWlCakMsTUFDbkIsRyIsInNvdXJjZXMiOlsid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL3BhZ2VzL2luZGV4LmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVkFMSURBVE9SIE9QVElPTlNcclxuZXhwb3J0IGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgZm9ybVNlbGVjdG9yOiBcIi5tb2RhbF9fZm9ybVwiLFxyXG4gIGlucHV0U2VsZWN0b3I6IFwiLm1vZGFsX19pbnB1dFwiLFxyXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5tb2RhbF9fYnV0dG9uXCIsXHJcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJtb2RhbF9fYnV0dG9uX2Rpc2FibGVkXCIsXHJcbiAgaW5wdXRFcnJvckNsYXNzOiBcIm1vZGFsX19pbnB1dF90eXBlX2Vycm9yXCIsXHJcbiAgZXJyb3JDbGFzczogXCJtb2RhbF9fZXJyb3JfdmlzaWJsZVwiLFxyXG59O1xyXG5cclxuLy8gSU5JVElBTCBDQVJEU1xyXG5leHBvcnQgY29uc3QgaW5pdGlhbENhcmRzID0gW1xyXG4gIHtcclxuICAgIG5hbWU6IFwiWW9zZW1pdGUgVmFsbGV5XCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QveW9zZW1pdGUuanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkxha2UgTG91aXNlXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGFrZS1sb3Vpc2UuanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkJhbGQgTW91bnRhaW5zXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvYmFsZC1tb3VudGFpbnMuanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkxhdGVtYXJcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9sYXRlbWFyLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJWYW5vaXNlIE5hdGlvbmFsIFBhcmtcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC92YW5vaXNlLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJMYWdvIGRpIEJyYWllc1wiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xhZ28uanBnXCIsXHJcbiAgfSxcclxuXTtcclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZCB7XHJcbiAgY29uc3RydWN0b3IoZGF0YSwgY2FyZFNlbGVjdG9yLCBoYW5kbGVJbWFnZUNsaWNrKSB7XHJcbiAgICB0aGlzLl9uYW1lID0gZGF0YS5uYW1lO1xyXG4gICAgdGhpcy5fbGluayA9IGRhdGEubGluaztcclxuICAgIHRoaXMuX2NhcmRTZWxlY3RvciA9IGNhcmRTZWxlY3RvcjtcclxuICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2sgPSBoYW5kbGVJbWFnZUNsaWNrO1xyXG4gIH1cclxuICBfc2V0Q2FyZEltYWdlTGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fY2FyZEltYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2sodGhpcy5fY2FyZEltYWdlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBfc2V0TGlrZUJ1dHRvbkxpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX2xpa2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5fbGlrZUJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKFwiY2FyZF9fbGlrZS1idXR0b25fYWN0aXZlXCIpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIF9zZXRUcmFzaEJ1dHRvbkxpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX3RyYXNoQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2NhcmRFbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgICB0aGlzLl9jYXJkRWxlbWVudCA9IG51bGw7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgY3JlYXRlQ2FyZCgpIHtcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50ID0gdGhpcy5fY2FyZFNlbGVjdG9yLmNsb25lTm9kZSh0cnVlKTtcclxuICAgIHRoaXMuX2NhcmRJbWFnZSA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIik7XHJcbiAgICB0aGlzLl9jYXJkRGVzYyA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fZGVzY3JpcHRpb25cIik7XHJcbiAgICB0aGlzLl9saWtlQnV0dG9uID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlLWJ1dHRvblwiKTtcclxuICAgIHRoaXMuX3RyYXNoQnV0dG9uID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX190cmFzaC1idXR0b25cIik7XHJcbiAgICB0aGlzLl9jYXJkRGVzYy50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XHJcbiAgICB0aGlzLl9jYXJkSW1hZ2Uuc3JjID0gdGhpcy5fbGluaztcclxuICAgIHRoaXMuX2NhcmRJbWFnZS5zZXRBdHRyaWJ1dGUoXCJhbHRcIiwgdGhpcy5fbmFtZSk7XHJcbiAgICB0aGlzLl9zZXRDYXJkSW1hZ2VMaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMuX3NldExpa2VCdXR0b25MaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMuX3NldFRyYXNoQnV0dG9uTGlzdGVuZXJzKCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2NhcmRFbGVtZW50O1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcclxuICBjb25zdHJ1Y3RvcihvcHRpb25zLCBmb3JtRWxlbWVudCkge1xyXG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICB0aGlzLl9mb3JtRWxlbWVudCA9IGZvcm1FbGVtZW50O1xyXG4gICAgdGhpcy5faW5wdXRFbGVtZW50cyA9IEFycmF5LmZyb20oXHJcbiAgICAgIHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fb3B0aW9ucy5pbnB1dFNlbGVjdG9yKVxyXG4gICAgKTtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIHRoaXMuX29wdGlvbnMuc3VibWl0QnV0dG9uU2VsZWN0b3JcclxuICAgICk7XHJcbiAgICB0aGlzLl9pbnB1dEVycm9yQ2xhc3MgPSB0aGlzLl9vcHRpb25zLmlucHV0RXJyb3JDbGFzcztcclxuICAgIHRoaXMuX2Vycm9yQ2xhc3MgPSB0aGlzLl9vcHRpb25zLmVycm9yQ2xhc3M7XHJcbiAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gdGhpcy5fb3B0aW9ucy5pbmFjdGl2ZUJ1dHRvbkNsYXNzO1xyXG4gIH1cclxuICBfc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50KSB7XHJcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBgIyR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmBcclxuICAgICk7XHJcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlO1xyXG4gICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgfVxyXG4gIF9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcclxuICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIGAjJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYFxyXG4gICAgKTtcclxuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgfVxyXG4gIF9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbGVtZW50KSB7XHJcbiAgICBpZiAoIWlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZCkge1xyXG4gICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcclxuICAgIH1cclxuICB9XHJcbiAgX2hhc0ludmFsaWRJbnB1dCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9pbnB1dEVsZW1lbnRzLnNvbWUoXHJcbiAgICAgIChpbnB1dEVsZW1lbnQpID0+ICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWRcclxuICAgICk7XHJcbiAgfVxyXG4gIF90b2dnbGVCdXR0b25TdGF0ZSgpIHtcclxuICAgIGlmICh0aGlzLl9oYXNJbnZhbGlkSW5wdXQoKSkge1xyXG4gICAgICB0aGlzLmRpc2FibGVGb3JtQnV0dG9uKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmVuYWJsZUZvcm1CdXR0b24oKTtcclxuICAgIH1cclxuICB9XHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgIHRoaXMuX2lucHV0RWxlbWVudHMuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIGRpc2FibGVGb3JtQnV0dG9uKCkge1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xyXG4gIH1cclxuICBlbmFibGVGb3JtQnV0dG9uKCkge1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcclxuICB9XHJcbiAgZW5hYmxlVmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMuX2Zvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbiAgcmVzZXRGb3JtVmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMuX2lucHV0RWxlbWVudHMuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcih7IHBvcHVwU2VsZWN0b3IgfSkge1xyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2Nsb3NlQnV0dG9uID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLm1vZGFsX19jbG9zZS1idXR0b25cIlxyXG4gICAgKTtcclxuICAgIHRoaXMuX2hhbmRsZUVzY0Nsb3NlID0gKGV2dCkgPT4ge1xyXG4gICAgICBpZiAoZXZ0LmtleSA9PT0gXCJFc2NhcGVcIikge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9jbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gdGhpcy5jbG9zZSgpKTtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2dCkgPT4ge1xyXG4gICAgICBpZiAoZXZ0LnRhcmdldCA9PT0gdGhpcy5fcG9wdXBFbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgb3BlbigpIHtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gIH1cclxuICBjbG9zZSgpIHtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3RvciwgaGFuZGxlRm9ybVN1Ym1pdCkge1xyXG4gICAgc3VwZXIoeyBwb3B1cFNlbGVjdG9yIH0pO1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2Zvcm1cIik7XHJcbiAgICB0aGlzLl9wb3B1cEZvcm1JbnB1dHMgPVxyXG4gICAgICB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbF9faW5wdXRcIik7XHJcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcclxuICAgIHRoaXMuX2hhbmRsZVN1Ym1pdExpc3RlbmVyID0gKGV2dCkgPT4ge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgY29uc3QgaW5wdXRWYWx1ZXMgPSB0aGlzLl9nZXRJbnB1dFZhbHVlcygpO1xyXG4gICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KGlucHV0VmFsdWVzKTtcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfTtcclxuICAgIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbiAgX2dldElucHV0VmFsdWVzKCkge1xyXG4gICAgY29uc3QgaW5wdXRWYWx1ZXMgPSB7fTtcclxuICAgIHRoaXMuX3BvcHVwRm9ybUlucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICBpbnB1dFZhbHVlc1tpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gaW5wdXRWYWx1ZXM7XHJcbiAgfVxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgdGhpcy5faGFuZGxlU3VibWl0TGlzdGVuZXIpO1xyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbn1cclxuIiwiLy8gSU1QT1JUU1xyXG5pbXBvcnQgeyBvcHRpb25zLCBpbml0aWFsQ2FyZHMgfSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzLmpzXCI7XHJcbmltcG9ydCBDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcclxuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xyXG5pbXBvcnQgU2VjdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9TZWN0aW9uLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoRm9ybSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzXCI7XHJcbmltcG9ydCBVc2VySW5mbyBmcm9tIFwiLi4vY29tcG9uZW50cy9Vc2VySW5mby5qc1wiO1xyXG5pbXBvcnQgXCIuLi9wYWdlcy9pbmRleC5jc3NcIjtcclxuXHJcbi8vIE1PREFMU1xyXG5jb25zdCBlZGl0UHJvZmlsZU1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNlZGl0LW1vZGFsXCIpO1xyXG5jb25zdCBhZGRDYXJkTW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FkZC1tb2RhbFwiKTtcclxuY29uc3QgaW1hZ2VNb2RhbCA9IG5ldyBQb3B1cFdpdGhJbWFnZShcIiNpbWFnZS1tb2RhbFwiKTtcclxuXHJcbi8vIEZPUk1TXHJcbmNvbnN0IHByb2ZpbGVGb3JtID0gZG9jdW1lbnQuZm9ybXNbXCJwcm9maWxlLWZvcm1cIl07XHJcbmNvbnN0IHByb2ZpbGVGb3JtTmFtZSA9IGVkaXRQcm9maWxlTW9kYWwucXVlcnlTZWxlY3RvcihcIltuYW1lID0gJ25hbWUnXVwiKTtcclxuY29uc3QgcHJvZmlsZUZvcm1EZXNjID0gZWRpdFByb2ZpbGVNb2RhbC5xdWVyeVNlbGVjdG9yKFxyXG4gIFwiW25hbWUgPSAnZGVzY3JpcHRpb24nXVwiXHJcbik7XHJcbmNvbnN0IGFkZENhcmRGb3JtID0gZG9jdW1lbnQuZm9ybXNbXCJhZGQtY2FyZC1mb3JtXCJdO1xyXG5jb25zdCB1c2VySW5mbyA9IG5ldyBVc2VySW5mbyh7XHJcbiAgbmFtZVNlbGVjdG9yOiBcIi5wcm9maWxlX19uYW1lXCIsXHJcbiAgZGVzY3JpcHRpb25TZWxlY3RvcjogXCIucHJvZmlsZV9fZGVzY3JpcHRpb25cIixcclxufSk7XHJcbmNvbnN0IHBvcHVwUHJvZmlsZUZvcm0gPSBuZXcgUG9wdXBXaXRoRm9ybShcclxuICBcIiNlZGl0LW1vZGFsXCIsXHJcbiAgcHJvZmlsZUZvcm1TdWJtaXRIYW5kbGVyXHJcbik7XHJcbmNvbnN0IHBvcHVwQWRkQ2FyZEZvcm0gPSBuZXcgUG9wdXBXaXRoRm9ybShcclxuICBcIiNhZGQtbW9kYWxcIixcclxuICBoYW5kbGVBZGRDYXJkRm9ybVN1Ym1pdFxyXG4pO1xyXG5cclxuLy8gRk9STSBWQUxJREFUSU9OXHJcbmNvbnN0IHByb2ZpbGVGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3Iob3B0aW9ucywgcHJvZmlsZUZvcm0pO1xyXG5jb25zdCBhZGRDYXJkRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKG9wdGlvbnMsIGFkZENhcmRGb3JtKTtcclxuXHJcbi8vIENBUkRTXHJcbmNvbnN0IGNhcmRUZW1wbGF0ZSA9XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjYXJkX190ZW1wbGF0ZVwiKS5jb250ZW50LmZpcnN0RWxlbWVudENoaWxkO1xyXG5jb25zdCBjcmVhdGVDYXJkID0gKGNhcmREYXRhKSA9PiB7XHJcbiAgY29uc3QgbmV3Q2FyZCA9IG5ldyBDYXJkKGNhcmREYXRhLCBjYXJkVGVtcGxhdGUsIGhhbmRsZUltYWdlQ2xpY2spO1xyXG4gIHJldHVybiBuZXdDYXJkLmNyZWF0ZUNhcmQoKTtcclxufTtcclxuXHJcbi8vIFNFQ1RJT05cclxuY29uc3QgcmVuZGVyZXIgPSAoY2FyZERhdGEpID0+IHtcclxuICBjb25zdCBjYXJkRWxlbWVudCA9IGNyZWF0ZUNhcmQoY2FyZERhdGEpO1xyXG4gIHNlY3Rpb24uYWRkSXRlbShjYXJkRWxlbWVudCk7XHJcbn07XHJcbmNvbnN0IHNlY3Rpb24gPSBuZXcgU2VjdGlvbihcclxuICB7IGl0ZW1zOiBpbml0aWFsQ2FyZHMsIHJlbmRlcmVyIH0sXHJcbiAgXCIuZ2FsbGVyeV9fY2FyZHNcIlxyXG4pO1xyXG5cclxuLy8gQlVUVE9OU1xyXG5jb25zdCBlZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19lZGl0LWJ1dHRvblwiKTtcclxuY29uc3QgYWRkQ2FyZEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fYWRkLWJ1dHRvblwiKTtcclxuXHJcbi8vIEZVTkNUSU9OU1xyXG5mdW5jdGlvbiBoYW5kbGVJbWFnZUNsaWNrKGV2dCkge1xyXG4gIGNvbnN0IGltYWdlRGF0YSA9IHtcclxuICAgIG5hbWU6IGV2dC5hbHQsXHJcbiAgICBsaW5rOiBldnQuc3JjLFxyXG4gIH07XHJcbiAgaW1hZ2VNb2RhbC5vcGVuKGltYWdlRGF0YSk7XHJcbn1cclxuZnVuY3Rpb24gZWRpdEJ1dHRvbkNsaWNrSGFuZGxlcigpIHtcclxuICBjb25zdCBjdXJyZW50VXNlckluZm8gPSB1c2VySW5mby5nZXRVc2VySW5mbygpO1xyXG4gIHByb2ZpbGVGb3JtTmFtZS52YWx1ZSA9IGN1cnJlbnRVc2VySW5mby5uYW1lO1xyXG4gIHByb2ZpbGVGb3JtRGVzYy52YWx1ZSA9IGN1cnJlbnRVc2VySW5mby5kZXNjcmlwdGlvbjtcclxuICBwcm9maWxlRm9ybVZhbGlkYXRvci5lbmFibGVGb3JtQnV0dG9uKCk7XHJcbiAgcG9wdXBQcm9maWxlRm9ybS5vcGVuKCk7XHJcbn1cclxuZnVuY3Rpb24gcHJvZmlsZUZvcm1TdWJtaXRIYW5kbGVyKGlucHV0VmFsdWVzKSB7XHJcbiAgdXNlckluZm8uc2V0VXNlckluZm8oaW5wdXRWYWx1ZXMpO1xyXG59XHJcbmZ1bmN0aW9uIGFkZENhcmRCdXR0b25DbGlja0hhbmRsZXIoKSB7XHJcbiAgcG9wdXBBZGRDYXJkRm9ybS5vcGVuKCk7XHJcbn1cclxuZnVuY3Rpb24gaGFuZGxlQWRkQ2FyZEZvcm1TdWJtaXQoaW5wdXRWYWx1ZXMpIHtcclxuICBjb25zdCBjYXJkRGF0YSA9IHtcclxuICAgIG5hbWU6IGlucHV0VmFsdWVzLnRpdGxlLFxyXG4gICAgbGluazogaW5wdXRWYWx1ZXMudXJsLFxyXG4gIH07XHJcbiAgc2VjdGlvbi5hZGRJdGVtKGNyZWF0ZUNhcmQoY2FyZERhdGEpKTtcclxuICBwb3B1cEFkZENhcmRGb3JtLmNsb3NlKCk7XHJcbiAgYWRkQ2FyZEZvcm1WYWxpZGF0b3IuZGlzYWJsZUZvcm1CdXR0b24oKTtcclxuICBhZGRDYXJkRm9ybS5yZXNldCgpO1xyXG59XHJcblxyXG4vLyBDTEFTUyBNRVRIT0QgQ0FMTEVSU1xyXG5zZWN0aW9uLnJlbmRlckl0ZW1zKCk7XHJcbmltYWdlTW9kYWwuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxucHJvZmlsZUZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5hZGRDYXJkRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcblxyXG4vLyBJTklUSUFMIEVWRU5UIExJU1RFTkVSU1xyXG5lZGl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBlZGl0QnV0dG9uQ2xpY2tIYW5kbGVyKTtcclxuYWRkQ2FyZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYWRkQ2FyZEJ1dHRvbkNsaWNrSGFuZGxlcik7XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgc3VwZXIoeyBwb3B1cFNlbGVjdG9yIH0pO1xyXG4gICAgdGhpcy5fcG9wdXBJbWFnZSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19pbWFnZVwiKTtcclxuICAgIHRoaXMuX3BvcHVwRGVzY3JpcHRpb24gPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgXCIubW9kYWxfX2ltYWdlLWZvb3RpbmdcIlxyXG4gICAgKTtcclxuICB9XHJcbiAgb3Blbih7IG5hbWUsIGxpbmsgfSkge1xyXG4gICAgdGhpcy5fcG9wdXBJbWFnZS5zcmMgPSBsaW5rO1xyXG4gICAgdGhpcy5fcG9wdXBJbWFnZS5hbHQgPSBgVGhpcyBpcyBhIHBpY3R1cmUgb2YgJHtuYW1lfWA7XHJcbiAgICB0aGlzLl9wb3B1cERlc2NyaXB0aW9uLnRleHRDb250ZW50ID0gbmFtZTtcclxuICAgIHN1cGVyLm9wZW4oKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlckluZm8ge1xyXG4gIGNvbnN0cnVjdG9yKHsgbmFtZVNlbGVjdG9yLCBkZXNjcmlwdGlvblNlbGVjdG9yIH0pIHtcclxuICAgIHRoaXMuX25hbWVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihuYW1lU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fZGVzY3JpcHRpb25FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihkZXNjcmlwdGlvblNlbGVjdG9yKTtcclxuICB9XHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuYW1lOiB0aGlzLl9uYW1lRWxlbWVudC50ZXh0Q29udGVudCxcclxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuX2Rlc2NyaXB0aW9uRWxlbWVudC50ZXh0Q29udGVudCxcclxuICAgIH07XHJcbiAgfVxyXG4gIHNldFVzZXJJbmZvKHsgbmFtZSwgZGVzY3JpcHRpb24gfSkge1xyXG4gICAgdGhpcy5fbmFtZUVsZW1lbnQudGV4dENvbnRlbnQgPSBuYW1lO1xyXG4gICAgdGhpcy5fZGVzY3JpcHRpb25FbGVtZW50LnRleHRDb250ZW50ID0gZGVzY3JpcHRpb247XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb24ge1xyXG4gIGNvbnN0cnVjdG9yKHsgaXRlbXMsIHJlbmRlcmVyIH0sIGVsZW1lbnRTZWxlY3Rvcikge1xyXG4gICAgdGhpcy5faXRlbXMgPSBpdGVtcztcclxuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICB0aGlzLl9jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW1lbnRTZWxlY3Rvcik7XHJcbiAgfVxyXG4gIHJlbmRlckl0ZW1zKCkge1xyXG4gICAgdGhpcy5faXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICB0aGlzLl9yZW5kZXJlcihpdGVtKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBhZGRJdGVtKGVsZW1lbnQpIHtcclxuICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGVsZW1lbnQpO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsib3B0aW9ucyIsImZvcm1TZWxlY3RvciIsImlucHV0U2VsZWN0b3IiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJpbnB1dEVycm9yQ2xhc3MiLCJlcnJvckNsYXNzIiwiQ2FyZCIsImNvbnN0cnVjdG9yIiwiZGF0YSIsImNhcmRTZWxlY3RvciIsImhhbmRsZUltYWdlQ2xpY2siLCJ0aGlzIiwiX25hbWUiLCJuYW1lIiwiX2xpbmsiLCJsaW5rIiwiX2NhcmRTZWxlY3RvciIsIl9oYW5kbGVJbWFnZUNsaWNrIiwiX3NldENhcmRJbWFnZUxpc3RlbmVycyIsIl9jYXJkSW1hZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiX3NldExpa2VCdXR0b25MaXN0ZW5lcnMiLCJfbGlrZUJ1dHRvbiIsImNsYXNzTGlzdCIsInRvZ2dsZSIsIl9zZXRUcmFzaEJ1dHRvbkxpc3RlbmVycyIsIl90cmFzaEJ1dHRvbiIsIl9jYXJkRWxlbWVudCIsInJlbW92ZSIsImNyZWF0ZUNhcmQiLCJjbG9uZU5vZGUiLCJxdWVyeVNlbGVjdG9yIiwiX2NhcmREZXNjIiwidGV4dENvbnRlbnQiLCJzcmMiLCJzZXRBdHRyaWJ1dGUiLCJGb3JtVmFsaWRhdG9yIiwiZm9ybUVsZW1lbnQiLCJfb3B0aW9ucyIsIl9mb3JtRWxlbWVudCIsIl9pbnB1dEVsZW1lbnRzIiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsIl9zdWJtaXRCdXR0b24iLCJfaW5wdXRFcnJvckNsYXNzIiwiX2Vycm9yQ2xhc3MiLCJfaW5hY3RpdmVCdXR0b25DbGFzcyIsIl9zaG93SW5wdXRFcnJvciIsImlucHV0RWxlbWVudCIsImVycm9yRWxlbWVudCIsImlkIiwiYWRkIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJfaGlkZUlucHV0RXJyb3IiLCJfY2hlY2tJbnB1dFZhbGlkaXR5IiwidmFsaWRpdHkiLCJ2YWxpZCIsIl9oYXNJbnZhbGlkSW5wdXQiLCJzb21lIiwiX3RvZ2dsZUJ1dHRvblN0YXRlIiwiZGlzYWJsZUZvcm1CdXR0b24iLCJlbmFibGVGb3JtQnV0dG9uIiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiZm9yRWFjaCIsImRpc2FibGVkIiwiZW5hYmxlVmFsaWRhdGlvbiIsImV2dCIsInByZXZlbnREZWZhdWx0IiwicmVzZXRGb3JtVmFsaWRhdGlvbiIsIlBvcHVwIiwiX3JlZiIsInBvcHVwU2VsZWN0b3IiLCJfcG9wdXBFbGVtZW50IiwiZG9jdW1lbnQiLCJfY2xvc2VCdXR0b24iLCJfaGFuZGxlRXNjQ2xvc2UiLCJrZXkiLCJjbG9zZSIsInNldEV2ZW50TGlzdGVuZXJzIiwidGFyZ2V0Iiwib3BlbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJQb3B1cFdpdGhGb3JtIiwiaGFuZGxlRm9ybVN1Ym1pdCIsInN1cGVyIiwiX3BvcHVwRm9ybSIsIl9wb3B1cEZvcm1JbnB1dHMiLCJfaGFuZGxlRm9ybVN1Ym1pdCIsIl9oYW5kbGVTdWJtaXRMaXN0ZW5lciIsImlucHV0VmFsdWVzIiwiX2dldElucHV0VmFsdWVzIiwiaW5wdXQiLCJ2YWx1ZSIsImVkaXRQcm9maWxlTW9kYWwiLCJpbWFnZU1vZGFsIiwiX3BvcHVwSW1hZ2UiLCJfcG9wdXBEZXNjcmlwdGlvbiIsImFsdCIsInByb2ZpbGVGb3JtIiwiZm9ybXMiLCJwcm9maWxlRm9ybU5hbWUiLCJwcm9maWxlRm9ybURlc2MiLCJhZGRDYXJkRm9ybSIsInVzZXJJbmZvIiwibmFtZVNlbGVjdG9yIiwiZGVzY3JpcHRpb25TZWxlY3RvciIsIl9uYW1lRWxlbWVudCIsIl9kZXNjcmlwdGlvbkVsZW1lbnQiLCJnZXRVc2VySW5mbyIsImRlc2NyaXB0aW9uIiwic2V0VXNlckluZm8iLCJfcmVmMiIsInBvcHVwUHJvZmlsZUZvcm0iLCJwb3B1cEFkZENhcmRGb3JtIiwiY2FyZERhdGEiLCJ0aXRsZSIsInVybCIsInNlY3Rpb24iLCJhZGRJdGVtIiwiYWRkQ2FyZEZvcm1WYWxpZGF0b3IiLCJyZXNldCIsInByb2ZpbGVGb3JtVmFsaWRhdG9yIiwiY2FyZFRlbXBsYXRlIiwiY29udGVudCIsImZpcnN0RWxlbWVudENoaWxkIiwiZWxlbWVudFNlbGVjdG9yIiwiaXRlbXMiLCJyZW5kZXJlciIsIl9pdGVtcyIsIl9yZW5kZXJlciIsIl9jb250YWluZXIiLCJyZW5kZXJJdGVtcyIsIml0ZW0iLCJlbGVtZW50IiwicHJlcGVuZCIsImNhcmRFbGVtZW50IiwiZWRpdEJ1dHRvbiIsImFkZENhcmRCdXR0b24iLCJpbWFnZURhdGEiLCJjdXJyZW50VXNlckluZm8iXSwic291cmNlUm9vdCI6IiJ9