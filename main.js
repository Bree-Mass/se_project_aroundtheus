!function(){"use strict";const e={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"};class t{constructor(e,t,s,r,i){this._name=e.name,this._link=e.link,this._id=e._id,this._isLiked=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteButtonClick=r,this._handleLikeButtonClick=i}_setCardImageListeners(){this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this._cardImage)}))}_checkLiked(){this._isLiked&&this._likeButton.classList.add("card__like-button_active")}_toggleLike=()=>{this._isLiked=!this._isLiked,this._likeButton.classList.toggle("card__like-button_active")};_setLikeButtonListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeButtonClick(this._id,this._isLiked,this._toggleLike)}))}_setTrashButtonListeners(){this._trashButton.addEventListener("click",(()=>{this._handleDeleteButtonClick(this._id)}))}createCard(){return this._cardElement=this._cardSelector.cloneNode(!0),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardDesc=this._cardElement.querySelector(".card__description"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._trashButton=this._cardElement.querySelector(".card__trash-button"),this._cardDesc.textContent=this._name,this._cardImage.src=this._link,this._cardImage.setAttribute("alt",this._name),this._cardElement.setAttribute("id",this._id),this._setCardImageListeners(),this._setLikeButtonListeners(),this._setTrashButtonListeners(),this._checkLiked(),this._cardElement}}class s{constructor(e,t){this._options=e,this._formElement=t,this._inputElements=Array.from(this._formElement.querySelectorAll(this._options.inputSelector)),this._submitButton=this._formElement.querySelector(this._options.submitButtonSelector),this._inputErrorClass=this._options.inputErrorClass,this._errorClass=this._options.errorClass,this._inactiveButtonClass=this._options.inactiveButtonClass}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this._inputElements.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this.disableFormButton():this.enableFormButton()}_setEventListeners(){this._toggleButtonState(),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}disableFormButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}enableFormButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetFormValidation(){this._inputElements.forEach((e=>{this._checkInputValidity(e)}))}}class r{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._closeButton=this._popupElement.querySelector(".modal__close-button"),this._handleEscClose=e=>{"Escape"===e.key&&this.close()}}setEventListeners(){this._closeButton.addEventListener("click",(()=>this.close())),this._popupElement.addEventListener("click",(e=>{e.target===this._popupElement&&this.close()}))}open(){document.addEventListener("keydown",this._handleEscClose),this._popupElement.classList.add("modal_opened")}close(){document.removeEventListener("keydown",this._handleEscClose),this._popupElement.classList.remove("modal_opened")}}class i extends r{constructor(e,t,s){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._popupFormInputs=this._popupElement.querySelectorAll(".modal__input"),this._popupButton=this._popupElement.querySelector(".modal__button"),this._handleFormSubmit=t,this._defaultButtonText=s,this._handleSubmitListener=e=>{e.preventDefault(),this._popupButton.textContent="Saving...";const t=this._getInputValues();this._handleFormSubmit(t).then((()=>{this.close()})).catch((e=>{console.error(e)})).finally((()=>{setTimeout((()=>{this._popupButton.textContent=this._defaultButtonText}),500)}))},this.setEventListeners()}_getInputValues(){const e={};return this._popupFormInputs.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._popupFormInputs.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){this._popupForm.addEventListener("submit",this._handleSubmitListener),super.setEventListeners()}}const n=new i("#avatar-modal",(function(e){const t=e.url;return b.patchAvatar(t).then((()=>{d.setUserAvatar(t)})).then((()=>{m.disableFormButton(),c.reset()})).catch((e=>(console.error(e),Promise.reject(`Error: ${e}`))))}),"Save"),o=new i("#edit-modal",(function(e){return b.patchUserInfo(e).then(d.setUserInfo(e)).catch((e=>(console.error(e),Promise.reject(`Error: ${e}`))))}),"Save"),a=new i("#add-modal",(function(e){const t={name:e.title,link:e.url};return b.postNewCard(t).then((e=>{L.addItem(k(e))})).then((()=>{E.disableFormButton(),_.reset()})).catch((e=>(console.error(e),Promise.reject(`Error: ${e}`))))}),"Save"),l=new i("#delete-modal",(function(){return b.deleteCard(v.id).then((()=>{let e=document.getElementById(v.id);e.remove(),e=null})).catch((e=>(console.error(e),Promise.reject(`Error: ${e}`))))}),"Yes"),h=new class extends r{constructor(e){super({popupSelector:e}),this._popupImage=this._popupElement.querySelector(".modal__image"),this._popupDescription=this._popupElement.querySelector(".modal__image-footing")}open(e){let{name:t,link:s}=e;this._popupImage.src=s,this._popupImage.alt=`This is a picture of ${t}`,this._popupDescription.textContent=t,super.open()}}("#image-modal"),c=document.forms["avatar-form"],u=document.forms["profile-form"],_=document.forms["add-card-form"],d=new class{constructor(e){let{nameSelector:t,aboutSelector:s,avatarSelector:r}=e;this._nameElement=document.querySelector(t),this._aboutElement=document.querySelector(s),this._avatarElement=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,about:this._aboutElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,about:s}=e;this._nameElement.textContent=t,this._aboutElement.textContent=s}setUserAvatar(e){this._avatarElement.src=e}}({nameSelector:".profile__name",aboutSelector:".profile__description",avatarSelector:".profile__image"}),m=new s(e,c),p=new s(e,u),E=new s(e,_),v={id:""},b=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_request(e,t){return fetch(e,t).then(this._checkResponse)}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_getUserAvatar(){return this._request(`${this._baseUrl}/users/me/avatar`,{headers:this._headers})}_getUserData(){return this._request(`${this._baseUrl}/users/me`,{headers:this._headers})}_getInitialCards(){return this._request(`${this._baseUrl}/cards`,{headers:this._headers})}returnData(){return Promise.all([this._getUserData(),this._getInitialCards()])}patchUserInfo(e){let{name:t,about:s}=e;return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})})}patchAvatar(e){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}postNewCard(e){let{name:t,link:s}=e;return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})})}deleteCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}addLike(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers})}removeLike(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"3f4287cc-0267-4f84-80ed-88627a1cce84","Content-Type":"application/json"}});b.returnData().then((e=>{let[t,s]=e;d.setUserAvatar(t.avatar),d.setUserInfo(t),L.renderItems(s)})).catch((e=>{console.error(e)}));const f=document.querySelector("#card__template").content.firstElementChild,k=e=>new t(e,f,I,B,y).createCard(),L=new class{constructor(e,t){this._renderer=e,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}((e=>{const t=k(e);L.addItem(t)}),".gallery__cards"),S=document.querySelector(".profile__image-button"),g=document.querySelector(".profile__edit-button"),C=document.querySelector(".profile__add-button");function I(e){const t={name:e.alt,link:e.src};h.open(t)}function B(e){v.id=e,l.open()}function y(e,t,s){return v.id=e,t?b.removeLike(v.id).then((()=>{s()})).catch((e=>{console.error(e)})):b.addLike(v.id).then((()=>{s()})).catch((e=>{console.error(e)}))}h.setEventListeners(),p.enableValidation(),E.enableValidation(),m.enableValidation(),S.addEventListener("click",(function(){n.open()})),g.addEventListener("click",(function(){const e=d.getUserInfo();console.log(e),o.setInputValues(e),p.enableFormButton(),o.open()})),C.addEventListener("click",(function(){a.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TUFBTThILEVBQVksQ0FDaEIzTCxLQUFNNkQsRUFBSXdFLElBQ1ZuSSxLQUFNMkQsRUFBSWpDLEtBRVpzRyxFQUFXdkQsS0FBS2dILEVBQ2xCLENBNkRBLFNBQVMvTCxFQUF3QjJLLEdBQy9CeEMsRUFBY2xGLEdBQUswSCxFQUNuQjFDLEVBQVlsRCxNQUNkLENBZUEsU0FBUzlFLEVBQXNCMEssRUFBUWxLLEVBQVN1TCxHQUU5QyxPQURBN0QsRUFBY2xGLEdBQUswSCxFQUNmbEssRUFDS21HLEVBQ0ppRSxXQUFXMUMsRUFBY2xGLElBQ3pCNEMsTUFBSyxLQUNKbUcsR0FBWSxJQUVibEcsT0FBT0MsSUFDTkMsUUFBUUMsTUFBTUYsRUFBSSxJQUdmYSxFQUNKZ0UsUUFBUXpDLEVBQWNsRixJQUN0QjRDLE1BQUssS0FDSm1HLEdBQVksSUFFYmxHLE9BQU9DLElBQ05DLFFBQVFDLE1BQU1GLEVBQUksR0FHMUIsQ0FJQXVDLEVBQVd6RCxvQkFDWHlFLEVBQXFCdEYsbUJBQ3JCK0QsRUFBcUIvRCxtQkFDckJnRCxFQUFvQmhELG1CQUdwQjRILEVBQWE1SyxpQkFBaUIsU0E3RzlCLFdBQ0V3RixFQUFnQnpCLE1BQ2xCLElBNEdBOEcsRUFBVzdLLGlCQUFpQixTQXpGNUIsV0FDRSxNQUFNaUwsRUFBY25GLEVBQVNvQyxjQUM3QmxELFFBQVFrRyxJQUFJRCxHQUNaNUUsRUFBaUJmLGVBQWUyRixHQUNoQzNDLEVBQXFCMUYsbUJBQ3JCeUQsRUFBaUJ0QyxNQUNuQixJQW9GQStHLEVBQWM5SyxpQkFBaUIsU0F6RS9CLFdBQ0V3RyxFQUFpQnpDLE1BQ25CLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9wYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9BcGkuanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVkFMSURBVE9SIE9QVElPTlNcclxuZXhwb3J0IGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgZm9ybVNlbGVjdG9yOiBcIi5tb2RhbF9fZm9ybVwiLFxyXG4gIGlucHV0U2VsZWN0b3I6IFwiLm1vZGFsX19pbnB1dFwiLFxyXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5tb2RhbF9fYnV0dG9uXCIsXHJcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJtb2RhbF9fYnV0dG9uX2Rpc2FibGVkXCIsXHJcbiAgaW5wdXRFcnJvckNsYXNzOiBcIm1vZGFsX19pbnB1dF90eXBlX2Vycm9yXCIsXHJcbiAgZXJyb3JDbGFzczogXCJtb2RhbF9fZXJyb3JfdmlzaWJsZVwiLFxyXG59O1xyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBDYXJkIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGRhdGEsXHJcbiAgICBjYXJkU2VsZWN0b3IsXHJcbiAgICBoYW5kbGVJbWFnZUNsaWNrLFxyXG4gICAgaGFuZGxlRGVsZXRlQnV0dG9uQ2xpY2ssXHJcbiAgICBoYW5kbGVMaWtlQnV0dG9uQ2xpY2tcclxuICApIHtcclxuICAgIHRoaXMuX25hbWUgPSBkYXRhLm5hbWU7XHJcbiAgICB0aGlzLl9saW5rID0gZGF0YS5saW5rO1xyXG4gICAgdGhpcy5faWQgPSBkYXRhLl9pZDtcclxuICAgIHRoaXMuX2lzTGlrZWQgPSBkYXRhLmlzTGlrZWQ7XHJcbiAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9oYW5kbGVJbWFnZUNsaWNrID0gaGFuZGxlSW1hZ2VDbGljaztcclxuICAgIHRoaXMuX2hhbmRsZURlbGV0ZUJ1dHRvbkNsaWNrID0gaGFuZGxlRGVsZXRlQnV0dG9uQ2xpY2s7XHJcbiAgICB0aGlzLl9oYW5kbGVMaWtlQnV0dG9uQ2xpY2sgPSBoYW5kbGVMaWtlQnV0dG9uQ2xpY2s7XHJcbiAgfVxyXG4gIF9zZXRDYXJkSW1hZ2VMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9jYXJkSW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlSW1hZ2VDbGljayh0aGlzLl9jYXJkSW1hZ2UpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIF9jaGVja0xpa2VkKCkge1xyXG4gICAgaWYgKHRoaXMuX2lzTGlrZWQpIHtcclxuICAgICAgdGhpcy5fbGlrZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiY2FyZF9fbGlrZS1idXR0b25fYWN0aXZlXCIpO1xyXG4gICAgfVxyXG4gIH1cclxuICBfdG9nZ2xlTGlrZSA9ICgpID0+IHtcclxuICAgIHRoaXMuX2lzTGlrZWQgPSAhdGhpcy5faXNMaWtlZDtcclxuICAgIHRoaXMuX2xpa2VCdXR0b24uY2xhc3NMaXN0LnRvZ2dsZShcImNhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZVwiKTtcclxuICB9O1xyXG4gIF9zZXRMaWtlQnV0dG9uTGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fbGlrZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLl9oYW5kbGVMaWtlQnV0dG9uQ2xpY2sodGhpcy5faWQsIHRoaXMuX2lzTGlrZWQsIHRoaXMuX3RvZ2dsZUxpa2UpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIF9zZXRUcmFzaEJ1dHRvbkxpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX3RyYXNoQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZURlbGV0ZUJ1dHRvbkNsaWNrKHRoaXMuX2lkKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlQ2FyZCgpIHtcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50ID0gdGhpcy5fY2FyZFNlbGVjdG9yLmNsb25lTm9kZSh0cnVlKTtcclxuICAgIHRoaXMuX2NhcmRJbWFnZSA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIik7XHJcbiAgICB0aGlzLl9jYXJkRGVzYyA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fZGVzY3JpcHRpb25cIik7XHJcbiAgICB0aGlzLl9saWtlQnV0dG9uID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlLWJ1dHRvblwiKTtcclxuICAgIHRoaXMuX3RyYXNoQnV0dG9uID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX190cmFzaC1idXR0b25cIik7XHJcbiAgICB0aGlzLl9jYXJkRGVzYy50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XHJcbiAgICB0aGlzLl9jYXJkSW1hZ2Uuc3JjID0gdGhpcy5fbGluaztcclxuICAgIHRoaXMuX2NhcmRJbWFnZS5zZXRBdHRyaWJ1dGUoXCJhbHRcIiwgdGhpcy5fbmFtZSk7XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCB0aGlzLl9pZCk7XHJcbiAgICB0aGlzLl9zZXRDYXJkSW1hZ2VMaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMuX3NldExpa2VCdXR0b25MaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMuX3NldFRyYXNoQnV0dG9uTGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLl9jaGVja0xpa2VkKCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2NhcmRFbGVtZW50O1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcclxuICBjb25zdHJ1Y3RvcihvcHRpb25zLCBmb3JtRWxlbWVudCkge1xyXG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICB0aGlzLl9mb3JtRWxlbWVudCA9IGZvcm1FbGVtZW50O1xyXG4gICAgdGhpcy5faW5wdXRFbGVtZW50cyA9IEFycmF5LmZyb20oXHJcbiAgICAgIHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fb3B0aW9ucy5pbnB1dFNlbGVjdG9yKVxyXG4gICAgKTtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIHRoaXMuX29wdGlvbnMuc3VibWl0QnV0dG9uU2VsZWN0b3JcclxuICAgICk7XHJcbiAgICB0aGlzLl9pbnB1dEVycm9yQ2xhc3MgPSB0aGlzLl9vcHRpb25zLmlucHV0RXJyb3JDbGFzcztcclxuICAgIHRoaXMuX2Vycm9yQ2xhc3MgPSB0aGlzLl9vcHRpb25zLmVycm9yQ2xhc3M7XHJcbiAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gdGhpcy5fb3B0aW9ucy5pbmFjdGl2ZUJ1dHRvbkNsYXNzO1xyXG4gIH1cclxuICBfc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50KSB7XHJcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBgIyR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmBcclxuICAgICk7XHJcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlO1xyXG4gICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgfVxyXG4gIF9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcclxuICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIGAjJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYFxyXG4gICAgKTtcclxuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgfVxyXG4gIF9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbGVtZW50KSB7XHJcbiAgICBpZiAoIWlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZCkge1xyXG4gICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcclxuICAgIH1cclxuICB9XHJcbiAgX2hhc0ludmFsaWRJbnB1dCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9pbnB1dEVsZW1lbnRzLnNvbWUoXHJcbiAgICAgIChpbnB1dEVsZW1lbnQpID0+ICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWRcclxuICAgICk7XHJcbiAgfVxyXG4gIF90b2dnbGVCdXR0b25TdGF0ZSgpIHtcclxuICAgIGlmICh0aGlzLl9oYXNJbnZhbGlkSW5wdXQoKSkge1xyXG4gICAgICB0aGlzLmRpc2FibGVGb3JtQnV0dG9uKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmVuYWJsZUZvcm1CdXR0b24oKTtcclxuICAgIH1cclxuICB9XHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgIHRoaXMuX2lucHV0RWxlbWVudHMuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIGRpc2FibGVGb3JtQnV0dG9uKCkge1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xyXG4gIH1cclxuICBlbmFibGVGb3JtQnV0dG9uKCkge1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcclxuICB9XHJcbiAgZW5hYmxlVmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMuX2Zvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbiAgcmVzZXRGb3JtVmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMuX2lucHV0RWxlbWVudHMuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcih7IHBvcHVwU2VsZWN0b3IgfSkge1xyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2Nsb3NlQnV0dG9uID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLm1vZGFsX19jbG9zZS1idXR0b25cIlxyXG4gICAgKTtcclxuICAgIHRoaXMuX2hhbmRsZUVzY0Nsb3NlID0gKGV2dCkgPT4ge1xyXG4gICAgICBpZiAoZXZ0LmtleSA9PT0gXCJFc2NhcGVcIikge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9jbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gdGhpcy5jbG9zZSgpKTtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2dCkgPT4ge1xyXG4gICAgICBpZiAoZXZ0LnRhcmdldCA9PT0gdGhpcy5fcG9wdXBFbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgb3BlbigpIHtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gIH1cclxuICBjbG9zZSgpIHtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3RvciwgaGFuZGxlRm9ybVN1Ym1pdCwgZGVmYXVsdEJ1dHRvblRleHQpIHtcclxuICAgIHN1cGVyKHsgcG9wdXBTZWxlY3RvciB9KTtcclxuICAgIHRoaXMuX3BvcHVwRm9ybSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtXCIpO1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtSW5wdXRzID1cclxuICAgICAgdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9kYWxfX2lucHV0XCIpO1xyXG4gICAgdGhpcy5fcG9wdXBCdXR0b24gPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fYnV0dG9uXCIpO1xyXG4gICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCA9IGhhbmRsZUZvcm1TdWJtaXQ7XHJcbiAgICB0aGlzLl9kZWZhdWx0QnV0dG9uVGV4dCA9IGRlZmF1bHRCdXR0b25UZXh0O1xyXG4gICAgdGhpcy5faGFuZGxlU3VibWl0TGlzdGVuZXIgPSAoZXZ0KSA9PiB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLl9wb3B1cEJ1dHRvbi50ZXh0Q29udGVudCA9IFwiU2F2aW5nLi4uXCI7XHJcbiAgICAgIGNvbnN0IGlucHV0VmFsdWVzID0gdGhpcy5fZ2V0SW5wdXRWYWx1ZXMoKTtcclxuICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdChpbnB1dFZhbHVlcylcclxuICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BvcHVwQnV0dG9uLnRleHRDb250ZW50ID0gdGhpcy5fZGVmYXVsdEJ1dHRvblRleHQ7XHJcbiAgICAgICAgICB9LCA1MDApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbiAgX2dldElucHV0VmFsdWVzKCkge1xyXG4gICAgY29uc3QgaW5wdXRWYWx1ZXMgPSB7fTtcclxuICAgIHRoaXMuX3BvcHVwRm9ybUlucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICBpbnB1dFZhbHVlc1tpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gaW5wdXRWYWx1ZXM7XHJcbiAgfVxyXG4gIHNldElucHV0VmFsdWVzKHVzZXJEYXRhKSB7XHJcbiAgICB0aGlzLl9wb3B1cEZvcm1JbnB1dHMuZm9yRWFjaCgoaW5wdXQpID0+IHtcclxuICAgICAgaW5wdXQudmFsdWUgPSB1c2VyRGF0YVtpbnB1dC5uYW1lXTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX3BvcHVwRm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIHRoaXMuX2hhbmRsZVN1Ym1pdExpc3RlbmVyKTtcclxuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgfVxyXG59XHJcbiIsIi8vIElNUE9SVFNcclxuaW1wb3J0IHsgb3B0aW9ucyB9IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcclxuaW1wb3J0IENhcmQgZnJvbSBcIi4uL2NvbXBvbmVudHMvQ2FyZC5qc1wiO1xyXG5pbXBvcnQgRm9ybVZhbGlkYXRvciBmcm9tIFwiLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzXCI7XHJcbmltcG9ydCBTZWN0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb24uanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEltYWdlIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanNcIjtcclxuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XHJcbmltcG9ydCBBcGkgZnJvbSBcIi4uL2NvbXBvbmVudHMvQXBpLmpzXCI7XHJcbmltcG9ydCBcIi4uL3BhZ2VzL2luZGV4LmNzc1wiO1xyXG5cclxuLy8gTU9EQUxTXHJcbmNvbnN0IHBvcHVwQXZhdGFyRm9ybSA9IG5ldyBQb3B1cFdpdGhGb3JtKFxyXG4gIFwiI2F2YXRhci1tb2RhbFwiLFxyXG4gIGF2YXRhckZvcm1TdWJtaXRIYW5kbGVyLFxyXG4gIFwiU2F2ZVwiXHJcbik7XHJcbmNvbnN0IHBvcHVwUHJvZmlsZUZvcm0gPSBuZXcgUG9wdXBXaXRoRm9ybShcclxuICBcIiNlZGl0LW1vZGFsXCIsXHJcbiAgcHJvZmlsZUZvcm1TdWJtaXRIYW5kbGVyLFxyXG4gIFwiU2F2ZVwiXHJcbik7XHJcbmNvbnN0IHBvcHVwQWRkQ2FyZEZvcm0gPSBuZXcgUG9wdXBXaXRoRm9ybShcclxuICBcIiNhZGQtbW9kYWxcIixcclxuICBhZGRDYXJkRm9ybVN1Ym1pdEhhbmRsZXIsXHJcbiAgXCJTYXZlXCJcclxuKTtcclxuY29uc3QgcG9wdXBEZWxldGUgPSBuZXcgUG9wdXBXaXRoRm9ybShcclxuICBcIiNkZWxldGUtbW9kYWxcIixcclxuICBoYW5kbGVEZWxldGVTdWJtaXQsXHJcbiAgXCJZZXNcIlxyXG4pO1xyXG5jb25zdCBpbWFnZU1vZGFsID0gbmV3IFBvcHVwV2l0aEltYWdlKFwiI2ltYWdlLW1vZGFsXCIpO1xyXG5cclxuLy8gRk9STVNcclxuY29uc3QgYXZhdGFyRm9ybSA9IGRvY3VtZW50LmZvcm1zW1wiYXZhdGFyLWZvcm1cIl07XHJcbmNvbnN0IHByb2ZpbGVGb3JtID0gZG9jdW1lbnQuZm9ybXNbXCJwcm9maWxlLWZvcm1cIl07XHJcbmNvbnN0IGFkZENhcmRGb3JtID0gZG9jdW1lbnQuZm9ybXNbXCJhZGQtY2FyZC1mb3JtXCJdO1xyXG5jb25zdCB1c2VySW5mbyA9IG5ldyBVc2VySW5mbyh7XHJcbiAgbmFtZVNlbGVjdG9yOiBcIi5wcm9maWxlX19uYW1lXCIsXHJcbiAgYWJvdXRTZWxlY3RvcjogXCIucHJvZmlsZV9fZGVzY3JpcHRpb25cIixcclxuICBhdmF0YXJTZWxlY3RvcjogXCIucHJvZmlsZV9faW1hZ2VcIixcclxufSk7XHJcblxyXG4vLyBGT1JNIFZBTElEQVRJT05cclxuY29uc3QgYXZhdGFyRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKG9wdGlvbnMsIGF2YXRhckZvcm0pO1xyXG5jb25zdCBwcm9maWxlRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKG9wdGlvbnMsIHByb2ZpbGVGb3JtKTtcclxuY29uc3QgYWRkQ2FyZEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihvcHRpb25zLCBhZGRDYXJkRm9ybSk7XHJcblxyXG4vLyBDQVJEU1xyXG5jb25zdCBjdXJyZW50Q2FyZElkID0geyBpZDogXCJcIiB9O1xyXG5jb25zdCBhcGkgPSBuZXcgQXBpKHtcclxuICBiYXNlVXJsOiBcImh0dHBzOi8vYXJvdW5kLWFwaS5lbi50cmlwbGV0ZW4tc2VydmljZXMuY29tL3YxXCIsXHJcbiAgaGVhZGVyczoge1xyXG4gICAgYXV0aG9yaXphdGlvbjogXCIzZjQyODdjYy0wMjY3LTRmODQtODBlZC04ODYyN2ExY2NlODRcIixcclxuICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gIH0sXHJcbn0pO1xyXG5hcGlcclxuICAucmV0dXJuRGF0YSgpXHJcbiAgLnRoZW4oKFt1c2VyRGF0YSwgY2FyZHNdKSA9PiB7XHJcbiAgICB1c2VySW5mby5zZXRVc2VyQXZhdGFyKHVzZXJEYXRhLmF2YXRhcik7XHJcbiAgICB1c2VySW5mby5zZXRVc2VySW5mbyh1c2VyRGF0YSk7XHJcbiAgICBzZWN0aW9uLnJlbmRlckl0ZW1zKGNhcmRzKTtcclxuICB9KVxyXG4gIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgfSk7XHJcbmNvbnN0IGNhcmRUZW1wbGF0ZSA9XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjYXJkX190ZW1wbGF0ZVwiKS5jb250ZW50LmZpcnN0RWxlbWVudENoaWxkO1xyXG5jb25zdCBjcmVhdGVDYXJkID0gKGNhcmREYXRhKSA9PiB7XHJcbiAgY29uc3QgbmV3Q2FyZCA9IG5ldyBDYXJkKFxyXG4gICAgY2FyZERhdGEsXHJcbiAgICBjYXJkVGVtcGxhdGUsXHJcbiAgICBoYW5kbGVJbWFnZUNsaWNrLFxyXG4gICAgaGFuZGxlRGVsZXRlQnV0dG9uQ2xpY2ssXHJcbiAgICBoYW5kbGVMaWtlQnV0dG9uQ2xpY2tcclxuICApO1xyXG4gIHJldHVybiBuZXdDYXJkLmNyZWF0ZUNhcmQoKTtcclxufTtcclxuXHJcbi8vIFNFQ1RJT05cclxuY29uc3QgcmVuZGVyZXIgPSAoY2FyZERhdGEpID0+IHtcclxuICBjb25zdCBjYXJkRWxlbWVudCA9IGNyZWF0ZUNhcmQoY2FyZERhdGEpO1xyXG4gIHNlY3Rpb24uYWRkSXRlbShjYXJkRWxlbWVudCk7XHJcbn07XHJcbmNvbnN0IHNlY3Rpb24gPSBuZXcgU2VjdGlvbihyZW5kZXJlciwgXCIuZ2FsbGVyeV9fY2FyZHNcIik7XHJcblxyXG4vLyBCVVRUT05TXHJcbmNvbnN0IGF2YXRhckJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9faW1hZ2UtYnV0dG9uXCIpO1xyXG5jb25zdCBlZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19lZGl0LWJ1dHRvblwiKTtcclxuY29uc3QgYWRkQ2FyZEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fYWRkLWJ1dHRvblwiKTtcclxuXHJcbi8vIEZVTkNUSU9OU1xyXG5mdW5jdGlvbiBoYW5kbGVJbWFnZUNsaWNrKGV2dCkge1xyXG4gIGNvbnN0IGltYWdlRGF0YSA9IHtcclxuICAgIG5hbWU6IGV2dC5hbHQsXHJcbiAgICBsaW5rOiBldnQuc3JjLFxyXG4gIH07XHJcbiAgaW1hZ2VNb2RhbC5vcGVuKGltYWdlRGF0YSk7XHJcbn1cclxuZnVuY3Rpb24gYXZhdGFyQnV0dG9uQ2xpY2tIYW5kbGVyKCkge1xyXG4gIHBvcHVwQXZhdGFyRm9ybS5vcGVuKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGF2YXRhckZvcm1TdWJtaXRIYW5kbGVyKGF2YXRhckxpbmspIHtcclxuICBjb25zdCBhdmF0YXJVcmwgPSBhdmF0YXJMaW5rLnVybDtcclxuICByZXR1cm4gYXBpXHJcbiAgICAucGF0Y2hBdmF0YXIoYXZhdGFyVXJsKVxyXG4gICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICB1c2VySW5mby5zZXRVc2VyQXZhdGFyKGF2YXRhclVybCk7XHJcbiAgICB9KVxyXG4gICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICBhdmF0YXJGb3JtVmFsaWRhdG9yLmRpc2FibGVGb3JtQnV0dG9uKCk7XHJcbiAgICAgIGF2YXRhckZvcm0ucmVzZXQoKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7ZXJyfWApO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVkaXRCdXR0b25DbGlja0hhbmRsZXIoKSB7XHJcbiAgY29uc3QgY3VycmVudFVzZXIgPSB1c2VySW5mby5nZXRVc2VySW5mbygpO1xyXG4gIGNvbnNvbGUubG9nKGN1cnJlbnRVc2VyKTtcclxuICBwb3B1cFByb2ZpbGVGb3JtLnNldElucHV0VmFsdWVzKGN1cnJlbnRVc2VyKTtcclxuICBwcm9maWxlRm9ybVZhbGlkYXRvci5lbmFibGVGb3JtQnV0dG9uKCk7XHJcbiAgcG9wdXBQcm9maWxlRm9ybS5vcGVuKCk7XHJcbn1cclxuZnVuY3Rpb24gcHJvZmlsZUZvcm1TdWJtaXRIYW5kbGVyKGlucHV0VmFsdWVzKSB7XHJcbiAgcmV0dXJuIGFwaVxyXG4gICAgLnBhdGNoVXNlckluZm8oaW5wdXRWYWx1ZXMpXHJcbiAgICAudGhlbih1c2VySW5mby5zZXRVc2VySW5mbyhpbnB1dFZhbHVlcykpXHJcbiAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7ZXJyfWApO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZENhcmRCdXR0b25DbGlja0hhbmRsZXIoKSB7XHJcbiAgcG9wdXBBZGRDYXJkRm9ybS5vcGVuKCk7XHJcbn1cclxuZnVuY3Rpb24gYWRkQ2FyZEZvcm1TdWJtaXRIYW5kbGVyKGlucHV0VmFsdWVzKSB7XHJcbiAgY29uc3QgY2FyZERhdGEgPSB7XHJcbiAgICBuYW1lOiBpbnB1dFZhbHVlcy50aXRsZSxcclxuICAgIGxpbms6IGlucHV0VmFsdWVzLnVybCxcclxuICB9O1xyXG4gIHJldHVybiBhcGlcclxuICAgIC5wb3N0TmV3Q2FyZChjYXJkRGF0YSlcclxuICAgIC50aGVuKChuZXdDYXJkKSA9PiB7XHJcbiAgICAgIHNlY3Rpb24uYWRkSXRlbShjcmVhdGVDYXJkKG5ld0NhcmQpKTtcclxuICAgIH0pXHJcbiAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgIGFkZENhcmRGb3JtVmFsaWRhdG9yLmRpc2FibGVGb3JtQnV0dG9uKCk7XHJcbiAgICAgIGFkZENhcmRGb3JtLnJlc2V0KCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yOiAke2Vycn1gKTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGhhbmRsZURlbGV0ZUJ1dHRvbkNsaWNrKGNhcmRJZCkge1xyXG4gIGN1cnJlbnRDYXJkSWQuaWQgPSBjYXJkSWQ7XHJcbiAgcG9wdXBEZWxldGUub3BlbigpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVEZWxldGVTdWJtaXQoKSB7XHJcbiAgcmV0dXJuIGFwaVxyXG4gICAgLmRlbGV0ZUNhcmQoY3VycmVudENhcmRJZC5pZClcclxuICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgbGV0IGNhcmRUb1JlbW92ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGN1cnJlbnRDYXJkSWQuaWQpO1xyXG4gICAgICBjYXJkVG9SZW1vdmUucmVtb3ZlKCk7XHJcbiAgICAgIGNhcmRUb1JlbW92ZSA9IG51bGw7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yOiAke2Vycn1gKTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGhhbmRsZUxpa2VCdXR0b25DbGljayhjYXJkSWQsIGlzTGlrZWQsIHRvZ2dsZUxpa2UpIHtcclxuICBjdXJyZW50Q2FyZElkLmlkID0gY2FyZElkO1xyXG4gIGlmIChpc0xpa2VkKSB7XHJcbiAgICByZXR1cm4gYXBpXHJcbiAgICAgIC5yZW1vdmVMaWtlKGN1cnJlbnRDYXJkSWQuaWQpXHJcbiAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICB0b2dnbGVMaWtlKCk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICB9KTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIGFwaVxyXG4gICAgICAuYWRkTGlrZShjdXJyZW50Q2FyZElkLmlkKVxyXG4gICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgdG9nZ2xlTGlrZSgpO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBDTEFTUyBNRVRIT0QgQ0FMTEVSU1xyXG5cclxuaW1hZ2VNb2RhbC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5wcm9maWxlRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcbmFkZENhcmRGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuYXZhdGFyRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcblxyXG4vLyBJTklUSUFMIEVWRU5UIExJU1RFTkVSU1xyXG5hdmF0YXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGF2YXRhckJ1dHRvbkNsaWNrSGFuZGxlcik7XHJcbmVkaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGVkaXRCdXR0b25DbGlja0hhbmRsZXIpO1xyXG5hZGRDYXJkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhZGRDYXJkQnV0dG9uQ2xpY2tIYW5kbGVyKTtcclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICBzdXBlcih7IHBvcHVwU2VsZWN0b3IgfSk7XHJcbiAgICB0aGlzLl9wb3B1cEltYWdlID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2ltYWdlXCIpO1xyXG4gICAgdGhpcy5fcG9wdXBEZXNjcmlwdGlvbiA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBcIi5tb2RhbF9faW1hZ2UtZm9vdGluZ1wiXHJcbiAgICApO1xyXG4gIH1cclxuICBvcGVuKHsgbmFtZSwgbGluayB9KSB7XHJcbiAgICB0aGlzLl9wb3B1cEltYWdlLnNyYyA9IGxpbms7XHJcbiAgICB0aGlzLl9wb3B1cEltYWdlLmFsdCA9IGBUaGlzIGlzIGEgcGljdHVyZSBvZiAke25hbWV9YDtcclxuICAgIHRoaXMuX3BvcHVwRGVzY3JpcHRpb24udGV4dENvbnRlbnQgPSBuYW1lO1xyXG4gICAgc3VwZXIub3BlbigpO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XHJcbiAgY29uc3RydWN0b3IoeyBuYW1lU2VsZWN0b3IsIGFib3V0U2VsZWN0b3IsIGF2YXRhclNlbGVjdG9yIH0pIHtcclxuICAgIHRoaXMuX25hbWVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihuYW1lU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fYWJvdXRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhYm91dFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2F2YXRhckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGF2YXRhclNlbGVjdG9yKTtcclxuICB9XHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuYW1lOiB0aGlzLl9uYW1lRWxlbWVudC50ZXh0Q29udGVudCxcclxuICAgICAgYWJvdXQ6IHRoaXMuX2Fib3V0RWxlbWVudC50ZXh0Q29udGVudCxcclxuICAgICAgYXZhdGFyOiB0aGlzLl9hdmF0YXJFbGVtZW50LnNyYyxcclxuICAgIH07XHJcbiAgfVxyXG4gIHNldFVzZXJJbmZvKHsgbmFtZSwgYWJvdXQgfSkge1xyXG4gICAgdGhpcy5fbmFtZUVsZW1lbnQudGV4dENvbnRlbnQgPSBuYW1lO1xyXG4gICAgdGhpcy5fYWJvdXRFbGVtZW50LnRleHRDb250ZW50ID0gYWJvdXQ7XHJcbiAgfVxyXG4gIHNldFVzZXJBdmF0YXIoYXZhdGFyKSB7XHJcbiAgICB0aGlzLl9hdmF0YXJFbGVtZW50LnNyYyA9IGF2YXRhcjtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBpIHtcclxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICB0aGlzLl9iYXNlVXJsID0gb3B0aW9ucy5iYXNlVXJsO1xyXG4gICAgdGhpcy5faGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycztcclxuICB9XHJcbiAgX3JlcXVlc3QodXJsLCBvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gZmV0Y2godXJsLCBvcHRpb25zKS50aGVuKHRoaXMuX2NoZWNrUmVzcG9uc2UpO1xyXG4gIH1cclxuICBfY2hlY2tSZXNwb25zZShyZXMpIHtcclxuICAgIGlmIChyZXMub2spIHtcclxuICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yOiAke3Jlcy5zdGF0dXN9YCk7XHJcbiAgfVxyXG4gIF9nZXRVc2VyQXZhdGFyKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWUvYXZhdGFyYCwge1xyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIF9nZXRVc2VyRGF0YSgpIHtcclxuICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lYCwge1xyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIF9nZXRJbml0aWFsQ2FyZHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuRGF0YSgpIHtcclxuICAgIHJldHVybiBQcm9taXNlLmFsbChbdGhpcy5fZ2V0VXNlckRhdGEoKSwgdGhpcy5fZ2V0SW5pdGlhbENhcmRzKCldKTtcclxuICB9XHJcbiAgcGF0Y2hVc2VySW5mbyh7IG5hbWUsIGFib3V0IH0pIHtcclxuICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lYCwge1xyXG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgYWJvdXQ6IGFib3V0LFxyXG4gICAgICB9KSxcclxuICAgIH0pO1xyXG4gIH1cclxuICBwYXRjaEF2YXRhcihhdmF0YXJMaW5rKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZS9hdmF0YXJgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgYXZhdGFyOiBhdmF0YXJMaW5rLFxyXG4gICAgICB9KSxcclxuICAgIH0pO1xyXG4gIH1cclxuICBwb3N0TmV3Q2FyZCh7IG5hbWUsIGxpbmsgfSkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgIGxpbms6IGxpbmssXHJcbiAgICAgIH0pLFxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIGRlbGV0ZUNhcmQoY2FyZElkKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH1gLCB7XHJcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYWRkTGlrZShjYXJkSWQpIHtcclxuICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7Y2FyZElkfS9saWtlc2AsIHtcclxuICAgICAgbWV0aG9kOiBcIlBVVFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHJlbW92ZUxpa2UoY2FyZElkKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH0vbGlrZXNgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcclxuICBjb25zdHJ1Y3RvcihyZW5kZXJlciwgZWxlbWVudFNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xyXG4gICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbGVtZW50U2VsZWN0b3IpO1xyXG4gIH1cclxuICByZW5kZXJJdGVtcyhpdGVtcykge1xyXG4gICAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICB0aGlzLl9yZW5kZXJlcihpdGVtKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBhZGRJdGVtKGl0ZW0pIHtcclxuICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGl0ZW0pO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsib3B0aW9ucyIsImZvcm1TZWxlY3RvciIsImlucHV0U2VsZWN0b3IiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJpbnB1dEVycm9yQ2xhc3MiLCJlcnJvckNsYXNzIiwiQ2FyZCIsImNvbnN0cnVjdG9yIiwiZGF0YSIsImNhcmRTZWxlY3RvciIsImhhbmRsZUltYWdlQ2xpY2siLCJoYW5kbGVEZWxldGVCdXR0b25DbGljayIsImhhbmRsZUxpa2VCdXR0b25DbGljayIsInRoaXMiLCJfbmFtZSIsIm5hbWUiLCJfbGluayIsImxpbmsiLCJfaWQiLCJfaXNMaWtlZCIsImlzTGlrZWQiLCJfY2FyZFNlbGVjdG9yIiwiX2hhbmRsZUltYWdlQ2xpY2siLCJfaGFuZGxlRGVsZXRlQnV0dG9uQ2xpY2siLCJfaGFuZGxlTGlrZUJ1dHRvbkNsaWNrIiwiX3NldENhcmRJbWFnZUxpc3RlbmVycyIsIl9jYXJkSW1hZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiX2NoZWNrTGlrZWQiLCJfbGlrZUJ1dHRvbiIsImNsYXNzTGlzdCIsImFkZCIsIl90b2dnbGVMaWtlIiwidG9nZ2xlIiwiX3NldExpa2VCdXR0b25MaXN0ZW5lcnMiLCJfc2V0VHJhc2hCdXR0b25MaXN0ZW5lcnMiLCJfdHJhc2hCdXR0b24iLCJjcmVhdGVDYXJkIiwiX2NhcmRFbGVtZW50IiwiY2xvbmVOb2RlIiwicXVlcnlTZWxlY3RvciIsIl9jYXJkRGVzYyIsInRleHRDb250ZW50Iiwic3JjIiwic2V0QXR0cmlidXRlIiwiRm9ybVZhbGlkYXRvciIsImZvcm1FbGVtZW50IiwiX29wdGlvbnMiLCJfZm9ybUVsZW1lbnQiLCJfaW5wdXRFbGVtZW50cyIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJfc3VibWl0QnV0dG9uIiwiX2lucHV0RXJyb3JDbGFzcyIsIl9lcnJvckNsYXNzIiwiX2luYWN0aXZlQnV0dG9uQ2xhc3MiLCJfc2hvd0lucHV0RXJyb3IiLCJpbnB1dEVsZW1lbnQiLCJlcnJvckVsZW1lbnQiLCJpZCIsInZhbGlkYXRpb25NZXNzYWdlIiwiX2hpZGVJbnB1dEVycm9yIiwicmVtb3ZlIiwiX2NoZWNrSW5wdXRWYWxpZGl0eSIsInZhbGlkaXR5IiwidmFsaWQiLCJfaGFzSW52YWxpZElucHV0Iiwic29tZSIsIl90b2dnbGVCdXR0b25TdGF0ZSIsImRpc2FibGVGb3JtQnV0dG9uIiwiZW5hYmxlRm9ybUJ1dHRvbiIsIl9zZXRFdmVudExpc3RlbmVycyIsImZvckVhY2giLCJkaXNhYmxlZCIsImVuYWJsZVZhbGlkYXRpb24iLCJldnQiLCJwcmV2ZW50RGVmYXVsdCIsInJlc2V0Rm9ybVZhbGlkYXRpb24iLCJQb3B1cCIsIl9yZWYiLCJwb3B1cFNlbGVjdG9yIiwiX3BvcHVwRWxlbWVudCIsImRvY3VtZW50IiwiX2Nsb3NlQnV0dG9uIiwiX2hhbmRsZUVzY0Nsb3NlIiwia2V5IiwiY2xvc2UiLCJzZXRFdmVudExpc3RlbmVycyIsInRhcmdldCIsIm9wZW4iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiUG9wdXBXaXRoRm9ybSIsImhhbmRsZUZvcm1TdWJtaXQiLCJkZWZhdWx0QnV0dG9uVGV4dCIsInN1cGVyIiwiX3BvcHVwRm9ybSIsIl9wb3B1cEZvcm1JbnB1dHMiLCJfcG9wdXBCdXR0b24iLCJfaGFuZGxlRm9ybVN1Ym1pdCIsIl9kZWZhdWx0QnV0dG9uVGV4dCIsIl9oYW5kbGVTdWJtaXRMaXN0ZW5lciIsImlucHV0VmFsdWVzIiwiX2dldElucHV0VmFsdWVzIiwidGhlbiIsImNhdGNoIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiZmluYWxseSIsInNldFRpbWVvdXQiLCJpbnB1dCIsInZhbHVlIiwic2V0SW5wdXRWYWx1ZXMiLCJ1c2VyRGF0YSIsInBvcHVwQXZhdGFyRm9ybSIsImF2YXRhckxpbmsiLCJhdmF0YXJVcmwiLCJ1cmwiLCJhcGkiLCJwYXRjaEF2YXRhciIsInVzZXJJbmZvIiwic2V0VXNlckF2YXRhciIsImF2YXRhckZvcm1WYWxpZGF0b3IiLCJhdmF0YXJGb3JtIiwicmVzZXQiLCJQcm9taXNlIiwicmVqZWN0IiwicG9wdXBQcm9maWxlRm9ybSIsInBhdGNoVXNlckluZm8iLCJzZXRVc2VySW5mbyIsInBvcHVwQWRkQ2FyZEZvcm0iLCJjYXJkRGF0YSIsInRpdGxlIiwicG9zdE5ld0NhcmQiLCJuZXdDYXJkIiwic2VjdGlvbiIsImFkZEl0ZW0iLCJhZGRDYXJkRm9ybVZhbGlkYXRvciIsImFkZENhcmRGb3JtIiwicG9wdXBEZWxldGUiLCJkZWxldGVDYXJkIiwiY3VycmVudENhcmRJZCIsImNhcmRUb1JlbW92ZSIsImdldEVsZW1lbnRCeUlkIiwiaW1hZ2VNb2RhbCIsIl9wb3B1cEltYWdlIiwiX3BvcHVwRGVzY3JpcHRpb24iLCJhbHQiLCJmb3JtcyIsInByb2ZpbGVGb3JtIiwibmFtZVNlbGVjdG9yIiwiYWJvdXRTZWxlY3RvciIsImF2YXRhclNlbGVjdG9yIiwiX25hbWVFbGVtZW50IiwiX2Fib3V0RWxlbWVudCIsIl9hdmF0YXJFbGVtZW50IiwiZ2V0VXNlckluZm8iLCJhYm91dCIsImF2YXRhciIsIl9yZWYyIiwicHJvZmlsZUZvcm1WYWxpZGF0b3IiLCJfYmFzZVVybCIsImJhc2VVcmwiLCJfaGVhZGVycyIsImhlYWRlcnMiLCJfcmVxdWVzdCIsImZldGNoIiwiX2NoZWNrUmVzcG9uc2UiLCJyZXMiLCJvayIsImpzb24iLCJzdGF0dXMiLCJfZ2V0VXNlckF2YXRhciIsIl9nZXRVc2VyRGF0YSIsIl9nZXRJbml0aWFsQ2FyZHMiLCJyZXR1cm5EYXRhIiwiYWxsIiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjYXJkSWQiLCJhZGRMaWtlIiwicmVtb3ZlTGlrZSIsImF1dGhvcml6YXRpb24iLCJjYXJkcyIsInJlbmRlckl0ZW1zIiwiY2FyZFRlbXBsYXRlIiwiY29udGVudCIsImZpcnN0RWxlbWVudENoaWxkIiwicmVuZGVyZXIiLCJlbGVtZW50U2VsZWN0b3IiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwiaXRlbXMiLCJpdGVtIiwicHJlcGVuZCIsImNhcmRFbGVtZW50IiwiYXZhdGFyQnV0dG9uIiwiZWRpdEJ1dHRvbiIsImFkZENhcmRCdXR0b24iLCJpbWFnZURhdGEiLCJ0b2dnbGVMaWtlIiwiY3VycmVudFVzZXIiLCJsb2ciXSwic291cmNlUm9vdCI6IiJ9